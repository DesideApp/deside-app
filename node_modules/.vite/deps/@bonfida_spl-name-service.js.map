{
  "version": 3,
  "sources": ["../../@bonfida/spl-name-service/dist/esm/_virtual/index.mjs", "../../@bonfida/spl-name-service/dist/esm/_virtual/index2.mjs", "../../@bonfida/spl-name-service/node_modules/base64-js/index.js", "../../@bonfida/spl-name-service/dist/esm/_virtual/index3.mjs", "../../@bonfida/spl-name-service/node_modules/ieee754/index.js", "../../@bonfida/spl-name-service/node_modules/buffer/index.js", "../../@bonfida/spl-name-service/node_modules/borsh/lib/esm/types.js", "../../@bonfida/spl-name-service/node_modules/borsh/lib/esm/buffer.js", "../../@bonfida/spl-name-service/node_modules/borsh/lib/esm/utils.js", "../../@bonfida/spl-name-service/node_modules/borsh/lib/esm/serialize.js", "../../@bonfida/spl-name-service/node_modules/borsh/lib/esm/deserialize.js", "../../@bonfida/spl-name-service/node_modules/borsh/lib/esm/index.js", "../../@bonfida/spl-name-service/src/instructions/burnInstruction.ts", "../../@bonfida/spl-name-service/src/constants.ts", "../../@bonfida/spl-name-service/dist/esm/node_modules/@bonfida/sns-records/dist/index.mjs", "../../@bonfida/spl-name-service/src/types/record.ts", "../../@bonfida/spl-name-service/src/error.ts", "../../@bonfida/spl-name-service/node_modules/@noble/hashes/esm/_assert.js", "../../@bonfida/spl-name-service/node_modules/@noble/hashes/esm/crypto.js", "../../@bonfida/spl-name-service/node_modules/@noble/hashes/esm/utils.js", "../../@bonfida/spl-name-service/node_modules/@noble/hashes/esm/_md.js", "../../@bonfida/spl-name-service/node_modules/@noble/hashes/esm/sha256.js", "../../@bonfida/spl-name-service/src/utils/getHashedNameSync.ts", "../../@bonfida/spl-name-service/src/utils/getNameAccountKeySync.ts", "../../@bonfida/spl-name-service/src/utils/getDomainKeySync.ts", "../../@bonfida/spl-name-service/src/utils/getReverseKeySync.ts", "../../@bonfida/spl-name-service/src/bindings/burnDomain.ts", "../../@bonfida/spl-name-service/src/int.ts", "../../@bonfida/spl-name-service/src/instructions/createInstruction.ts", "../../@bonfida/spl-name-service/src/nft/const.ts", "../../@bonfida/spl-name-service/src/nft/getDomainMint.ts", "../../@solana/buffer-layout-utils/src/base.ts", "../../@solana/buffer-layout-utils/src/bigint.ts", "../../bignumber.js/bignumber.mjs", "../../@solana/buffer-layout-utils/src/decimal.ts", "../../@solana/buffer-layout-utils/src/native.ts", "../../@solana/buffer-layout-utils/src/web3.ts", "../../@bonfida/spl-name-service/node_modules/@solana/spl-token/lib/esm/state/account.js", "../../@bonfida/spl-name-service/src/nft/retrieveNftOwnerV2.ts", "../../@bonfida/spl-name-service/src/state.ts", "../../@bonfida/spl-name-service/src/deprecated/utils.ts", "../../@bonfida/spl-name-service/src/bindings/createNameRegistry.ts", "../../@bonfida/spl-name-service/src/utils/check.ts", "../../@bonfida/spl-name-service/node_modules/@scure/base/lib/esm/index.js", "../../@bonfida/spl-name-service/node_modules/punycode/punycode.es6.js", "../../@bonfida/spl-name-service/dist/esm/_virtual/_commonjsHelpers.mjs", "../../@bonfida/spl-name-service/dist/esm/_virtual/ipaddr.mjs", "../../@bonfida/spl-name-service/node_modules/ipaddr.js/lib/ipaddr.js", "../../@bonfida/spl-name-service/src/record/serializeRecord.ts", "../../@bonfida/spl-name-service/src/bindings/createRecordInstruction.ts", "../../@bonfida/spl-name-service/src/record_v2/const.ts", "../../@bonfida/spl-name-service/src/record_v2/serializeRecordV2Content.ts", "../../@bonfida/spl-name-service/src/bindings/createRecordV2Instruction.ts", "../../@bonfida/spl-name-service/src/instructions/createReverseInstruction.ts", "../../@bonfida/spl-name-service/src/bindings/createReverseName.ts", "../../@bonfida/spl-name-service/node_modules/@noble/hashes/esm/_u64.js", "../../@bonfida/spl-name-service/node_modules/@noble/hashes/esm/sha512.js", "../../@bonfida/spl-name-service/node_modules/@noble/curves/esm/abstract/utils.js", "../../@bonfida/spl-name-service/node_modules/@noble/curves/esm/abstract/modular.js", "../../@bonfida/spl-name-service/node_modules/@noble/curves/esm/abstract/curve.js", "../../@bonfida/spl-name-service/node_modules/@noble/curves/esm/abstract/edwards.js", "../../@bonfida/spl-name-service/node_modules/@noble/curves/esm/ed25519.js", "../../@bonfida/spl-name-service/src/record/checkSolRecord.ts", "../../@bonfida/spl-name-service/src/record/serializeSolRecord.ts", "../../@bonfida/spl-name-service/src/bindings/createSolRecordInstruction.ts", "../../@bonfida/spl-name-service/src/bindings/createSubdomain.ts", "../../@bonfida/spl-name-service/src/instructions/deleteInstruction.ts", "../../@bonfida/spl-name-service/src/bindings/deleteNameRegistry.ts", "../../@bonfida/spl-name-service/src/bindings/deleteRecordV2.ts", "../../@bonfida/spl-name-service/src/bindings/ethValidateRecordV2Content.ts", "../../@bonfida/spl-name-service/src/instructions/createInstructionV3.ts", "../../@bonfida/spl-name-service/node_modules/@solana/spl-token/lib/esm/constants.js", "../../@bonfida/spl-name-service/node_modules/@solana/spl-token/lib/esm/errors.js", "../../@bonfida/spl-name-service/node_modules/@solana/spl-token/lib/esm/extensions/accountType.js", "../../@bonfida/spl-name-service/node_modules/@solana/spl-token/lib/esm/state/multisig.js", "../../@bonfida/spl-name-service/node_modules/@solana/spl-token/lib/esm/state/mint.js", "../../@bonfida/spl-name-service/node_modules/@solana/spl-token/lib/esm/instructions/associatedTokenAccount.js", "../../@bonfida/spl-name-service/src/bindings/registerDomainName.ts", "../../@bonfida/spl-name-service/src/instructions/createSplitV2Instruction.ts", "../../@bonfida/spl-name-service/src/utils/getPythFeedAccountKey.ts", "../../@bonfida/spl-name-service/src/bindings/registerDomainNameV2.ts", "../../@bonfida/spl-name-service/src/instructions/registerFavoriteInstruction.ts", "../../@bonfida/spl-name-service/src/utils/deserializeReverse.ts", "../../@bonfida/spl-name-service/src/utils/getReverseKeyFromDomainKey.ts", "../../@bonfida/spl-name-service/src/utils/reverseLookup.ts", "../../@bonfida/spl-name-service/src/favorite-domain.ts", "../../@bonfida/spl-name-service/src/bindings/registerFavorite.ts", "../../@bonfida/spl-name-service/src/instructions/createWithNftInstruction.ts", "../../@bonfida/spl-name-service/src/bindings/registerWithNft.ts", "../../@bonfida/spl-name-service/src/instructions/transferInstruction.ts", "../../@bonfida/spl-name-service/src/bindings/transferNameOwnership.ts", "../../@bonfida/spl-name-service/src/bindings/transferSubdomain.ts", "../../@bonfida/spl-name-service/src/instructions/updateInstruction.ts", "../../@bonfida/spl-name-service/src/bindings/updateNameRegistryData.ts", "../../@bonfida/spl-name-service/src/bindings/updateRecordInstruction.ts", "../../@bonfida/spl-name-service/src/bindings/updateRecordV2Instruction.ts", "../../@bonfida/spl-name-service/src/bindings/updateSolRecordInstruction.ts", "../../@bonfida/spl-name-service/src/bindings/validateRecordV2Content.ts", "../../@bonfida/spl-name-service/src/bindings/writRoaRecordV2.ts", "../../@bonfida/spl-name-service/src/twitter/ReverseTwitterRegistryState.ts", "../../@bonfida/spl-name-service/src/twitter/changeTwitterRegistryData.ts", "../../@bonfida/spl-name-service/src/twitter/createReverseTwitterRegistry.ts", "../../@bonfida/spl-name-service/src/twitter/changeVerifiedPubkey.ts", "../../@bonfida/spl-name-service/src/twitter/createVerifiedTwitterRegistry.ts", "../../@bonfida/spl-name-service/src/twitter/deleteTwitterRegistry.ts", "../../@bonfida/spl-name-service/src/twitter/getHandleAndRegistryKey.ts", "../../@bonfida/spl-name-service/src/twitter/getTwitterHandleandRegistryKeyViaFilters.ts", "../../@bonfida/spl-name-service/src/twitter/getTwitterRegistry.ts", "../../@bonfida/spl-name-service/src/twitter/getTwitterRegistryData.ts", "../../@bonfida/spl-name-service/src/twitter/getTwitterRegistryKey.ts", "../../@bonfida/spl-name-service/src/utils/findSubdomains.ts", "../../@bonfida/spl-name-service/src/utils/getAllDomains.ts", "../../@bonfida/spl-name-service/src/utils/getAllRegisteredDomains.ts", "../../@bonfida/spl-name-service/src/utils/reverseLookupBatch.ts", "../../@bonfida/spl-name-service/src/utils/getDomainKeysWithReverses.ts", "../../@bonfida/spl-name-service/dist/esm/node_modules/graphemesplit/typeTrie.json.mjs", "../../@bonfida/spl-name-service/dist/esm/node_modules/graphemesplit/extPict.json.mjs", "../../@bonfida/spl-name-service/node_modules/tiny-inflate/index.js", "../../@bonfida/spl-name-service/node_modules/unicode-trie/swap.js", "../../@bonfida/spl-name-service/node_modules/unicode-trie/index.js", "../../@bonfida/spl-name-service/dist/esm/_virtual/base64.mjs", "../../@bonfida/spl-name-service/node_modules/js-base64/base64.js", "../../@bonfida/spl-name-service/node_modules/graphemesplit/types.js", "../../@bonfida/spl-name-service/node_modules/graphemesplit/index.js", "../../@bonfida/spl-name-service/src/utils/getDomainPriceFromName.ts", "../../@bonfida/spl-name-service/src/nft/state.ts", "../../@bonfida/spl-name-service/src/nft/getRecordFromMint.ts", "../../@bonfida/spl-name-service/src/nft/retrieveRecords.ts", "../../@bonfida/spl-name-service/src/utils/getTokenizedDomains.ts", "../../@bonfida/spl-name-service/src/instructions/createV2Instruction.ts", "../../@bonfida/spl-name-service/src/instructions/reallocInstruction.ts", "../../@bonfida/spl-name-service/src/nft/retrieveNftOwner.ts", "../../@bonfida/spl-name-service/src/nft/retrieveNfts.ts", "../../@bonfida/spl-name-service/node_modules/bs58/node_modules/base-x/src/index.js", "../../@bonfida/spl-name-service/node_modules/bs58/index.js", "../../@bonfida/spl-name-service/src/record/deserializeRecord.ts", "../../@bonfida/spl-name-service/src/record/getRecordKeySync.ts", "../../@bonfida/spl-name-service/src/record/getRecord.ts", "../../@bonfida/spl-name-service/src/record/getRecords.ts", "../../@bonfida/spl-name-service/src/record/helpers/getArweaveRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getBackgroundRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getBackpackRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getBtcRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getBscRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getDiscordRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getDogeRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getEmailRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getEthRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getGithubRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getInjectiveRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getIpfsRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getLtcRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getPicRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getPointRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getRedditRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getShdwRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getSolRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getTelegramRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getTwitterRecord.ts", "../../@bonfida/spl-name-service/src/record/helpers/getUrlRecord.ts", "../../@bonfida/spl-name-service/src/types/custom-bg.ts", "../../@bonfida/spl-name-service/src/record_v2/getRecordV2Key.ts", "../../@bonfida/spl-name-service/src/resolve/resolve.ts", "../../@bonfida/spl-name-service/src/resolve/resolveSolRecordV1.ts", "../../@bonfida/spl-name-service/src/resolve/resolveSolRecordV2.ts", "../../@bonfida/spl-name-service/src/custom-bg.ts", "../../@bonfida/spl-name-service/src/record_v2/deserializeRecordV2Content.ts", "../../@bonfida/spl-name-service/src/record_v2/getRecordV2.ts", "../../@bonfida/spl-name-service/src/record_v2/getMultipleRecordsV2.ts", "../../@bonfida/spl-name-service/src/record_v2/verifyRightOfAssociation.ts", "../../@bonfida/spl-name-service/src/record_v2/utils.ts", "../../@bonfida/spl-name-service/src/devnet.ts"],
  "sourcesContent": ["var r={};export{r as __exports};\n//# sourceMappingURL=index.mjs.map\n", "var r={};export{r as __exports};\n//# sourceMappingURL=index2.mjs.map\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "var r={};export{r as __exports};\n//# sourceMappingURL=index3.mjs.map\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n", "export var integers = ['u8', 'u16', 'u32', 'u64', 'u128', 'i8', 'i16', 'i32', 'i64', 'i128', 'f32', 'f64'];\n", "var EncodeBuffer = /** @class */ (function () {\n    function EncodeBuffer() {\n        this.offset = 0;\n        this.buffer_size = 256;\n        this.buffer = new ArrayBuffer(this.buffer_size);\n        this.view = new DataView(this.buffer);\n    }\n    EncodeBuffer.prototype.resize_if_necessary = function (needed_space) {\n        if (this.buffer_size - this.offset < needed_space) {\n            this.buffer_size = Math.max(this.buffer_size * 2, this.buffer_size + needed_space);\n            var new_buffer = new ArrayBuffer(this.buffer_size);\n            new Uint8Array(new_buffer).set(new Uint8Array(this.buffer));\n            this.buffer = new_buffer;\n            this.view = new DataView(new_buffer);\n        }\n    };\n    EncodeBuffer.prototype.get_used_buffer = function () {\n        return new Uint8Array(this.buffer).slice(0, this.offset);\n    };\n    EncodeBuffer.prototype.store_value = function (value, type) {\n        var bSize = type.substring(1);\n        var size = parseInt(bSize) / 8;\n        this.resize_if_necessary(size);\n        var toCall = type[0] === 'f' ? \"setFloat\".concat(bSize) : type[0] === 'i' ? \"setInt\".concat(bSize) : \"setUint\".concat(bSize);\n        this.view[toCall](this.offset, value, true);\n        this.offset += size;\n    };\n    EncodeBuffer.prototype.store_bytes = function (from) {\n        this.resize_if_necessary(from.length);\n        new Uint8Array(this.buffer).set(new Uint8Array(from), this.offset);\n        this.offset += from.length;\n    };\n    return EncodeBuffer;\n}());\nexport { EncodeBuffer };\nvar DecodeBuffer = /** @class */ (function () {\n    function DecodeBuffer(buf) {\n        this.offset = 0;\n        this.buffer_size = buf.length;\n        this.buffer = new ArrayBuffer(buf.length);\n        new Uint8Array(this.buffer).set(buf);\n        this.view = new DataView(this.buffer);\n    }\n    DecodeBuffer.prototype.assert_enough_buffer = function (size) {\n        if (this.offset + size > this.buffer.byteLength) {\n            throw new Error('Error in schema, the buffer is smaller than expected');\n        }\n    };\n    DecodeBuffer.prototype.consume_value = function (type) {\n        var bSize = type.substring(1);\n        var size = parseInt(bSize) / 8;\n        this.assert_enough_buffer(size);\n        var toCall = type[0] === 'f' ? \"getFloat\".concat(bSize) : type[0] === 'i' ? \"getInt\".concat(bSize) : \"getUint\".concat(bSize);\n        var ret = this.view[toCall](this.offset, true);\n        this.offset += size;\n        return ret;\n    };\n    DecodeBuffer.prototype.consume_bytes = function (size) {\n        this.assert_enough_buffer(size);\n        var ret = this.buffer.slice(this.offset, this.offset + size);\n        this.offset += size;\n        return ret;\n    };\n    return DecodeBuffer;\n}());\nexport { DecodeBuffer };\n", "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { integers } from './types.js';\nexport function isArrayLike(value) {\n    // source: https://stackoverflow.com/questions/24048547/checking-if-an-object-is-array-like\n    return (Array.isArray(value) ||\n        (!!value &&\n            typeof value === 'object' &&\n            'length' in value &&\n            typeof (value.length) === 'number' &&\n            (value.length === 0 ||\n                (value.length > 0 &&\n                    (value.length - 1) in value))));\n}\nexport function expect_type(value, type, fieldPath) {\n    if (typeof (value) !== type) {\n        throw new Error(\"Expected \".concat(type, \" not \").concat(typeof (value), \"(\").concat(value, \") at \").concat(fieldPath.join('.')));\n    }\n}\nexport function expect_bigint(value, fieldPath) {\n    var basicType = ['number', 'string', 'bigint', 'boolean'].includes(typeof (value));\n    var strObject = typeof (value) === 'object' && value !== null && 'toString' in value;\n    if (!basicType && !strObject) {\n        throw new Error(\"Expected bigint, number, boolean or string not \".concat(typeof (value), \"(\").concat(value, \") at \").concat(fieldPath.join('.')));\n    }\n}\nexport function expect_same_size(length, expected, fieldPath) {\n    if (length !== expected) {\n        throw new Error(\"Array length \".concat(length, \" does not match schema length \").concat(expected, \" at \").concat(fieldPath.join('.')));\n    }\n}\nexport function expect_enum(value, fieldPath) {\n    if (typeof (value) !== 'object' || value === null) {\n        throw new Error(\"Expected object not \".concat(typeof (value), \"(\").concat(value, \") at \").concat(fieldPath.join('.')));\n    }\n}\n// Validate Schema\nvar VALID_STRING_TYPES = integers.concat(['bool', 'string']);\nvar VALID_OBJECT_KEYS = ['option', 'enum', 'array', 'set', 'map', 'struct'];\nvar ErrorSchema = /** @class */ (function (_super) {\n    __extends(ErrorSchema, _super);\n    function ErrorSchema(schema, expected) {\n        var message = \"Invalid schema: \".concat(JSON.stringify(schema), \" expected \").concat(expected);\n        return _super.call(this, message) || this;\n    }\n    return ErrorSchema;\n}(Error));\nexport { ErrorSchema };\nexport function validate_schema(schema) {\n    if (typeof (schema) === 'string' && VALID_STRING_TYPES.includes(schema)) {\n        return;\n    }\n    if (schema && typeof (schema) === 'object') {\n        var keys = Object.keys(schema);\n        if (keys.length === 1 && VALID_OBJECT_KEYS.includes(keys[0])) {\n            var key = keys[0];\n            if (key === 'option')\n                return validate_schema(schema[key]);\n            if (key === 'enum')\n                return validate_enum_schema(schema[key]);\n            if (key === 'array')\n                return validate_array_schema(schema[key]);\n            if (key === 'set')\n                return validate_schema(schema[key]);\n            if (key === 'map')\n                return validate_map_schema(schema[key]);\n            if (key === 'struct')\n                return validate_struct_schema(schema[key]);\n        }\n    }\n    throw new ErrorSchema(schema, VALID_OBJECT_KEYS.join(', ') + ' or ' + VALID_STRING_TYPES.join(', '));\n}\nfunction validate_enum_schema(schema) {\n    if (!Array.isArray(schema))\n        throw new ErrorSchema(schema, 'Array');\n    for (var _i = 0, schema_1 = schema; _i < schema_1.length; _i++) {\n        var sch = schema_1[_i];\n        if (typeof sch !== 'object' || !('struct' in sch)) {\n            throw new Error('Missing \"struct\" key in enum schema');\n        }\n        if (typeof sch.struct !== 'object' || Object.keys(sch.struct).length !== 1) {\n            throw new Error('The \"struct\" in each enum must have a single key');\n        }\n        validate_schema({ struct: sch.struct });\n    }\n}\nfunction validate_array_schema(schema) {\n    if (typeof schema !== 'object')\n        throw new ErrorSchema(schema, '{ type, len? }');\n    if (schema.len && typeof schema.len !== 'number') {\n        throw new Error(\"Invalid schema: \".concat(schema));\n    }\n    if ('type' in schema)\n        return validate_schema(schema.type);\n    throw new ErrorSchema(schema, '{ type, len? }');\n}\nfunction validate_map_schema(schema) {\n    if (typeof schema === 'object' && 'key' in schema && 'value' in schema) {\n        validate_schema(schema.key);\n        validate_schema(schema.value);\n    }\n    else {\n        throw new ErrorSchema(schema, '{ key, value }');\n    }\n}\nfunction validate_struct_schema(schema) {\n    if (typeof schema !== 'object')\n        throw new ErrorSchema(schema, 'object');\n    for (var key in schema) {\n        validate_schema(schema[key]);\n    }\n}\n", "import { integers } from './types.js';\nimport { EncodeBuffer } from './buffer.js';\nimport * as utils from './utils.js';\nvar BorshSerializer = /** @class */ (function () {\n    function BorshSerializer(checkTypes) {\n        this.encoded = new EncodeBuffer();\n        this.fieldPath = ['value'];\n        this.checkTypes = checkTypes;\n    }\n    BorshSerializer.prototype.encode = function (value, schema) {\n        this.encode_value(value, schema);\n        return this.encoded.get_used_buffer();\n    };\n    BorshSerializer.prototype.encode_value = function (value, schema) {\n        if (typeof schema === 'string') {\n            if (integers.includes(schema))\n                return this.encode_integer(value, schema);\n            if (schema === 'string')\n                return this.encode_string(value);\n            if (schema === 'bool')\n                return this.encode_boolean(value);\n        }\n        if (typeof schema === 'object') {\n            if ('option' in schema)\n                return this.encode_option(value, schema);\n            if ('enum' in schema)\n                return this.encode_enum(value, schema);\n            if ('array' in schema)\n                return this.encode_array(value, schema);\n            if ('set' in schema)\n                return this.encode_set(value, schema);\n            if ('map' in schema)\n                return this.encode_map(value, schema);\n            if ('struct' in schema)\n                return this.encode_struct(value, schema);\n        }\n    };\n    BorshSerializer.prototype.encode_integer = function (value, schema) {\n        var size = parseInt(schema.substring(1));\n        if (size <= 32 || schema == 'f64') {\n            this.checkTypes && utils.expect_type(value, 'number', this.fieldPath);\n            this.encoded.store_value(value, schema);\n        }\n        else {\n            this.checkTypes && utils.expect_bigint(value, this.fieldPath);\n            this.encode_bigint(BigInt(value), size);\n        }\n    };\n    BorshSerializer.prototype.encode_bigint = function (value, size) {\n        var buffer_len = size / 8;\n        var buffer = new Uint8Array(buffer_len);\n        for (var i = 0; i < buffer_len; i++) {\n            buffer[i] = Number(value & BigInt(0xff));\n            value = value >> BigInt(8);\n        }\n        this.encoded.store_bytes(new Uint8Array(buffer));\n    };\n    BorshSerializer.prototype.encode_string = function (value) {\n        this.checkTypes && utils.expect_type(value, 'string', this.fieldPath);\n        var _value = value;\n        // encode to utf8 bytes without using TextEncoder\n        var utf8Bytes = [];\n        for (var i = 0; i < _value.length; i++) {\n            var charCode = _value.charCodeAt(i);\n            if (charCode < 0x80) {\n                utf8Bytes.push(charCode);\n            }\n            else if (charCode < 0x800) {\n                utf8Bytes.push(0xc0 | (charCode >> 6), 0x80 | (charCode & 0x3f));\n            }\n            else if (charCode < 0xd800 || charCode >= 0xe000) {\n                utf8Bytes.push(0xe0 | (charCode >> 12), 0x80 | ((charCode >> 6) & 0x3f), 0x80 | (charCode & 0x3f));\n            }\n            else {\n                i++;\n                charCode = 0x10000 + (((charCode & 0x3ff) << 10) | (_value.charCodeAt(i) & 0x3ff));\n                utf8Bytes.push(0xf0 | (charCode >> 18), 0x80 | ((charCode >> 12) & 0x3f), 0x80 | ((charCode >> 6) & 0x3f), 0x80 | (charCode & 0x3f));\n            }\n        }\n        // 4 bytes for length + string bytes\n        this.encoded.store_value(utf8Bytes.length, 'u32');\n        this.encoded.store_bytes(new Uint8Array(utf8Bytes));\n    };\n    BorshSerializer.prototype.encode_boolean = function (value) {\n        this.checkTypes && utils.expect_type(value, 'boolean', this.fieldPath);\n        this.encoded.store_value(value ? 1 : 0, 'u8');\n    };\n    BorshSerializer.prototype.encode_option = function (value, schema) {\n        if (value === null || value === undefined) {\n            this.encoded.store_value(0, 'u8');\n        }\n        else {\n            this.encoded.store_value(1, 'u8');\n            this.encode_value(value, schema.option);\n        }\n    };\n    BorshSerializer.prototype.encode_enum = function (value, schema) {\n        this.checkTypes && utils.expect_enum(value, this.fieldPath);\n        var valueKey = Object.keys(value)[0];\n        for (var i = 0; i < schema[\"enum\"].length; i++) {\n            var valueSchema = schema[\"enum\"][i];\n            if (valueKey === Object.keys(valueSchema.struct)[0]) {\n                this.encoded.store_value(i, 'u8');\n                return this.encode_struct(value, valueSchema);\n            }\n        }\n        throw new Error(\"Enum key (\".concat(valueKey, \") not found in enum schema: \").concat(JSON.stringify(schema), \" at \").concat(this.fieldPath.join('.')));\n    };\n    BorshSerializer.prototype.encode_array = function (value, schema) {\n        if (utils.isArrayLike(value))\n            return this.encode_arraylike(value, schema);\n        if (value instanceof ArrayBuffer)\n            return this.encode_buffer(value, schema);\n        throw new Error(\"Expected Array-like not \".concat(typeof (value), \"(\").concat(value, \") at \").concat(this.fieldPath.join('.')));\n    };\n    BorshSerializer.prototype.encode_arraylike = function (value, schema) {\n        if (schema.array.len) {\n            utils.expect_same_size(value.length, schema.array.len, this.fieldPath);\n        }\n        else {\n            // 4 bytes for length\n            this.encoded.store_value(value.length, 'u32');\n        }\n        // array values\n        for (var i = 0; i < value.length; i++) {\n            this.encode_value(value[i], schema.array.type);\n        }\n    };\n    BorshSerializer.prototype.encode_buffer = function (value, schema) {\n        if (schema.array.len) {\n            utils.expect_same_size(value.byteLength, schema.array.len, this.fieldPath);\n        }\n        else {\n            // 4 bytes for length\n            this.encoded.store_value(value.byteLength, 'u32');\n        }\n        // array values\n        this.encoded.store_bytes(new Uint8Array(value));\n    };\n    BorshSerializer.prototype.encode_set = function (value, schema) {\n        this.checkTypes && utils.expect_type(value, 'object', this.fieldPath);\n        var isSet = value instanceof Set;\n        var values = isSet ? Array.from(value.values()) : Object.values(value);\n        // 4 bytes for length\n        this.encoded.store_value(values.length, 'u32');\n        // set values\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var value_1 = values_1[_i];\n            this.encode_value(value_1, schema.set);\n        }\n    };\n    BorshSerializer.prototype.encode_map = function (value, schema) {\n        this.checkTypes && utils.expect_type(value, 'object', this.fieldPath);\n        var isMap = value instanceof Map;\n        var keys = isMap ? Array.from(value.keys()) : Object.keys(value);\n        // 4 bytes for length\n        this.encoded.store_value(keys.length, 'u32');\n        // store key/values\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            this.encode_value(key, schema.map.key);\n            this.encode_value(isMap ? value.get(key) : value[key], schema.map.value);\n        }\n    };\n    BorshSerializer.prototype.encode_struct = function (value, schema) {\n        this.checkTypes && utils.expect_type(value, 'object', this.fieldPath);\n        for (var _i = 0, _a = Object.keys(schema.struct); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.fieldPath.push(key);\n            this.encode_value(value[key], schema.struct[key]);\n            this.fieldPath.pop();\n        }\n    };\n    return BorshSerializer;\n}());\nexport { BorshSerializer };\n", "import { integers } from './types.js';\nimport { DecodeBuffer } from './buffer.js';\nvar BorshDeserializer = /** @class */ (function () {\n    function BorshDeserializer(bufferArray) {\n        this.buffer = new DecodeBuffer(bufferArray);\n    }\n    BorshDeserializer.prototype.decode = function (schema) {\n        return this.decode_value(schema);\n    };\n    BorshDeserializer.prototype.decode_value = function (schema) {\n        if (typeof schema === 'string') {\n            if (integers.includes(schema))\n                return this.decode_integer(schema);\n            if (schema === 'string')\n                return this.decode_string();\n            if (schema === 'bool')\n                return this.decode_boolean();\n        }\n        if (typeof schema === 'object') {\n            if ('option' in schema)\n                return this.decode_option(schema);\n            if ('enum' in schema)\n                return this.decode_enum(schema);\n            if ('array' in schema)\n                return this.decode_array(schema);\n            if ('set' in schema)\n                return this.decode_set(schema);\n            if ('map' in schema)\n                return this.decode_map(schema);\n            if ('struct' in schema)\n                return this.decode_struct(schema);\n        }\n        throw new Error(\"Unsupported type: \".concat(schema));\n    };\n    BorshDeserializer.prototype.decode_integer = function (schema) {\n        var size = parseInt(schema.substring(1));\n        if (size <= 32 || schema == 'f64') {\n            return this.buffer.consume_value(schema);\n        }\n        return this.decode_bigint(size, schema.startsWith('i'));\n    };\n    BorshDeserializer.prototype.decode_bigint = function (size, signed) {\n        if (signed === void 0) { signed = false; }\n        var buffer_len = size / 8;\n        var buffer = new Uint8Array(this.buffer.consume_bytes(buffer_len));\n        var bits = buffer.reduceRight(function (r, x) { return r + x.toString(16).padStart(2, '0'); }, '');\n        if (signed && buffer[buffer_len - 1]) {\n            return BigInt.asIntN(size, BigInt(\"0x\".concat(bits)));\n        }\n        return BigInt(\"0x\".concat(bits));\n    };\n    BorshDeserializer.prototype.decode_string = function () {\n        var len = this.decode_integer('u32');\n        var buffer = new Uint8Array(this.buffer.consume_bytes(len));\n        // decode utf-8 string without using TextDecoder\n        // first get all bytes to single byte code points\n        var codePoints = [];\n        for (var i = 0; i < len; ++i) {\n            var byte = buffer[i];\n            if (byte < 0x80) {\n                codePoints.push(byte);\n            }\n            else if (byte < 0xE0) {\n                codePoints.push(((byte & 0x1F) << 6) | (buffer[++i] & 0x3F));\n            }\n            else if (byte < 0xF0) {\n                codePoints.push(((byte & 0x0F) << 12) | ((buffer[++i] & 0x3F) << 6) | (buffer[++i] & 0x3F));\n            }\n            else {\n                var codePoint = ((byte & 0x07) << 18) | ((buffer[++i] & 0x3F) << 12) | ((buffer[++i] & 0x3F) << 6) | (buffer[++i] & 0x3F);\n                codePoints.push(codePoint);\n            }\n        }\n        // then decode code points to utf-8\n        return String.fromCodePoint.apply(String, codePoints);\n    };\n    BorshDeserializer.prototype.decode_boolean = function () {\n        return this.buffer.consume_value('u8') > 0;\n    };\n    BorshDeserializer.prototype.decode_option = function (schema) {\n        var option = this.buffer.consume_value('u8');\n        if (option === 1) {\n            return this.decode_value(schema.option);\n        }\n        if (option !== 0) {\n            throw new Error(\"Invalid option \".concat(option));\n        }\n        return null;\n    };\n    BorshDeserializer.prototype.decode_enum = function (schema) {\n        var _a;\n        var valueIndex = this.buffer.consume_value('u8');\n        if (valueIndex > schema[\"enum\"].length) {\n            throw new Error(\"Enum option \".concat(valueIndex, \" is not available\"));\n        }\n        var struct = schema[\"enum\"][valueIndex].struct;\n        var key = Object.keys(struct)[0];\n        return _a = {}, _a[key] = this.decode_value(struct[key]), _a;\n    };\n    BorshDeserializer.prototype.decode_array = function (schema) {\n        var result = [];\n        var len = schema.array.len ? schema.array.len : this.decode_integer('u32');\n        for (var i = 0; i < len; ++i) {\n            result.push(this.decode_value(schema.array.type));\n        }\n        return result;\n    };\n    BorshDeserializer.prototype.decode_set = function (schema) {\n        var len = this.decode_integer('u32');\n        var result = new Set();\n        for (var i = 0; i < len; ++i) {\n            result.add(this.decode_value(schema.set));\n        }\n        return result;\n    };\n    BorshDeserializer.prototype.decode_map = function (schema) {\n        var len = this.decode_integer('u32');\n        var result = new Map();\n        for (var i = 0; i < len; ++i) {\n            var key = this.decode_value(schema.map.key);\n            var value = this.decode_value(schema.map.value);\n            result.set(key, value);\n        }\n        return result;\n    };\n    BorshDeserializer.prototype.decode_struct = function (schema) {\n        var result = {};\n        for (var key in schema.struct) {\n            result[key] = this.decode_value(schema.struct[key]);\n        }\n        return result;\n    };\n    return BorshDeserializer;\n}());\nexport { BorshDeserializer };\n", "import { BorshSerializer } from './serialize.js';\nimport { BorshDeserializer } from './deserialize.js';\nimport * as utils from './utils.js';\nexport function serialize(schema, value, validate) {\n    if (validate === void 0) { validate = true; }\n    if (validate)\n        utils.validate_schema(schema);\n    var serializer = new BorshSerializer(validate);\n    return serializer.encode(value, schema);\n}\nexport function deserialize(schema, buffer, validate) {\n    if (validate === void 0) { validate = true; }\n    if (validate)\n        utils.validate_schema(schema);\n    var deserializer = new BorshDeserializer(buffer);\n    return deserializer.decode(schema);\n}\n", null, null, "import\"../../../buffer/index.mjs\";import{PublicKey as e,SystemProgram as t,TransactionInstruction as r}from\"@solana/web3.js\";import{__exports as i}from\"../../../../_virtual/index.mjs\";var n,s=[\"u8\",\"u16\",\"u32\",\"u64\",\"u128\",\"i8\",\"i16\",\"i32\",\"i64\",\"i128\",\"f32\",\"f64\"],o=function(){function e(){this.offset=0,this.buffer_size=256,this.buffer=new ArrayBuffer(this.buffer_size),this.view=new DataView(this.buffer)}return e.prototype.resize_if_necessary=function(e){if(this.buffer_size-this.offset<e){this.buffer_size=Math.max(2*this.buffer_size,this.buffer_size+e);var t=new ArrayBuffer(this.buffer_size);new Uint8Array(t).set(new Uint8Array(this.buffer)),this.buffer=t,this.view=new DataView(t)}},e.prototype.get_used_buffer=function(){return new Uint8Array(this.buffer).slice(0,this.offset)},e.prototype.store_value=function(e,t){var r=t.substring(1),i=parseInt(r)/8;this.resize_if_necessary(i);var n=\"f\"===t[0]?\"setFloat\".concat(r):\"i\"===t[0]?\"setInt\".concat(r):\"setUint\".concat(r);this.view[n](this.offset,e,!0),this.offset+=i},e.prototype.store_bytes=function(e){this.resize_if_necessary(e.length),new Uint8Array(this.buffer).set(new Uint8Array(e),this.offset),this.offset+=e.length},e}(),a=function(){function e(e){this.offset=0,this.buffer_size=e.length,this.buffer=new ArrayBuffer(e.length),new Uint8Array(this.buffer).set(e),this.view=new DataView(this.buffer)}return e.prototype.assert_enough_buffer=function(e){if(this.offset+e>this.buffer.byteLength)throw new Error(\"Error in schema, the buffer is smaller than expected\")},e.prototype.consume_value=function(e){var t=e.substring(1),r=parseInt(t)/8;this.assert_enough_buffer(r);var i=\"f\"===e[0]?\"getFloat\".concat(t):\"i\"===e[0]?\"getInt\".concat(t):\"getUint\".concat(t),n=this.view[i](this.offset,!0);return this.offset+=r,n},e.prototype.consume_bytes=function(e){this.assert_enough_buffer(e);var t=this.buffer.slice(this.offset,this.offset+e);return this.offset+=e,t},e}(),u=(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});function c(e,t,r){if(typeof e!==t)throw new Error(\"Expected \".concat(t,\" not \").concat(typeof e,\"(\").concat(e,\") at \").concat(r.join(\".\")))}function h(e,t,r){if(e!==t)throw new Error(\"Array length \".concat(e,\" does not match schema length \").concat(t,\" at \").concat(r.join(\".\")))}var f=s.concat([\"bool\",\"string\"]),d=[\"option\",\"enum\",\"array\",\"set\",\"map\",\"struct\"],l=function(e){function t(t,r){var i=\"Invalid schema: \".concat(JSON.stringify(t),\" expected \").concat(r);return e.call(this,i)||this}return u(t,e),t}(Error);function p(e){if(\"string\"!=typeof e||!f.includes(e)){if(e&&\"object\"==typeof e){var t=Object.keys(e);if(1===t.length&&d.includes(t[0])){var r=t[0];if(\"option\"===r)return p(e[r]);if(\"enum\"===r)return function(e){if(!Array.isArray(e))throw new l(e,\"Array\");for(var t=0,r=e;t<r.length;t++){var i=r[t];if(\"object\"!=typeof i||!(\"struct\"in i))throw new Error('Missing \"struct\" key in enum schema');if(\"object\"!=typeof i.struct||1!==Object.keys(i.struct).length)throw new Error('The \"struct\" in each enum must have a single key');p({struct:i.struct})}}(e[r]);if(\"array\"===r)return function(e){if(\"object\"!=typeof e)throw new l(e,\"{ type, len? }\");if(e.len&&\"number\"!=typeof e.len)throw new Error(\"Invalid schema: \".concat(e));if(\"type\"in e)return p(e.type);throw new l(e,\"{ type, len? }\")}(e[r]);if(\"set\"===r)return p(e[r]);if(\"map\"===r)return function(e){if(\"object\"!=typeof e||!(\"key\"in e)||!(\"value\"in e))throw new l(e,\"{ key, value }\");p(e.key),p(e.value)}(e[r]);if(\"struct\"===r)return function(e){if(\"object\"!=typeof e)throw new l(e,\"object\");for(var t in e)p(e[t])}(e[r])}}throw new l(e,d.join(\", \")+\" or \"+f.join(\", \"))}}var y=function(){function e(e){this.encoded=new o,this.fieldPath=[\"value\"],this.checkTypes=e}return e.prototype.encode=function(e,t){return this.encode_value(e,t),this.encoded.get_used_buffer()},e.prototype.encode_value=function(e,t){if(\"string\"==typeof t){if(s.includes(t))return this.encode_integer(e,t);if(\"string\"===t)return this.encode_string(e);if(\"bool\"===t)return this.encode_boolean(e)}if(\"object\"==typeof t){if(\"option\"in t)return this.encode_option(e,t);if(\"enum\"in t)return this.encode_enum(e,t);if(\"array\"in t)return this.encode_array(e,t);if(\"set\"in t)return this.encode_set(e,t);if(\"map\"in t)return this.encode_map(e,t);if(\"struct\"in t)return this.encode_struct(e,t)}},e.prototype.encode_integer=function(e,t){var r=parseInt(t.substring(1));r<=32||\"f64\"==t?(this.checkTypes&&c(e,\"number\",this.fieldPath),this.encoded.store_value(e,t)):(this.checkTypes&&function(e,t){if(!([\"number\",\"string\",\"bigint\",\"boolean\"].includes(typeof e)||\"object\"==typeof e&&null!==e&&\"toString\"in e))throw new Error(\"Expected bigint, number, boolean or string not \".concat(typeof e,\"(\").concat(e,\") at \").concat(t.join(\".\")))}(e,this.fieldPath),this.encode_bigint(BigInt(e),r))},e.prototype.encode_bigint=function(e,t){for(var r=t/8,i=new Uint8Array(r),n=0;n<r;n++)i[n]=Number(e&BigInt(255)),e>>=BigInt(8);this.encoded.store_bytes(new Uint8Array(i))},e.prototype.encode_string=function(e){this.checkTypes&&c(e,\"string\",this.fieldPath);var t=e;this.encoded.store_value(t.length,\"u32\");for(var r=0;r<t.length;r++)this.encoded.store_value(t.charCodeAt(r),\"u8\")},e.prototype.encode_boolean=function(e){this.checkTypes&&c(e,\"boolean\",this.fieldPath),this.encoded.store_value(e?1:0,\"u8\")},e.prototype.encode_option=function(e,t){null==e?this.encoded.store_value(0,\"u8\"):(this.encoded.store_value(1,\"u8\"),this.encode_value(e,t.option))},e.prototype.encode_enum=function(e,t){this.checkTypes&&function(e,t){if(\"object\"!=typeof e||null===e)throw new Error(\"Expected object not \".concat(typeof e,\"(\").concat(e,\") at \").concat(t.join(\".\")))}(e,this.fieldPath);for(var r=Object.keys(e)[0],i=0;i<t.enum.length;i++){var n=t.enum[i];if(r===Object.keys(n.struct)[0])return this.encoded.store_value(i,\"u8\"),this.encode_struct(e,n)}throw new Error(\"Enum key (\".concat(r,\") not found in enum schema: \").concat(JSON.stringify(t),\" at \").concat(this.fieldPath.join(\".\")))},e.prototype.encode_array=function(e,t){if(function(e){return Array.isArray(e)||!!e&&\"object\"==typeof e&&\"length\"in e&&\"number\"==typeof e.length&&(0===e.length||e.length>0&&e.length-1 in e)}(e))return this.encode_arraylike(e,t);if(e instanceof ArrayBuffer)return this.encode_buffer(e,t);throw new Error(\"Expected Array-like not \".concat(typeof e,\"(\").concat(e,\") at \").concat(this.fieldPath.join(\".\")))},e.prototype.encode_arraylike=function(e,t){t.array.len?h(e.length,t.array.len,this.fieldPath):this.encoded.store_value(e.length,\"u32\");for(var r=0;r<e.length;r++)this.encode_value(e[r],t.array.type)},e.prototype.encode_buffer=function(e,t){t.array.len?h(e.byteLength,t.array.len,this.fieldPath):this.encoded.store_value(e.byteLength,\"u32\"),this.encoded.store_bytes(new Uint8Array(e))},e.prototype.encode_set=function(e,t){this.checkTypes&&c(e,\"object\",this.fieldPath);var r=e instanceof Set?Array.from(e.values()):Object.values(e);this.encoded.store_value(r.length,\"u32\");for(var i=0,n=r;i<n.length;i++){var s=n[i];this.encode_value(s,t.set)}},e.prototype.encode_map=function(e,t){this.checkTypes&&c(e,\"object\",this.fieldPath);var r=e instanceof Map,i=r?Array.from(e.keys()):Object.keys(e);this.encoded.store_value(i.length,\"u32\");for(var n=0,s=i;n<s.length;n++){var o=s[n];this.encode_value(o,t.map.key),this.encode_value(r?e.get(o):e[o],t.map.value)}},e.prototype.encode_struct=function(e,t){this.checkTypes&&c(e,\"object\",this.fieldPath);for(var r=0,i=Object.keys(t.struct);r<i.length;r++){var n=i[r];this.fieldPath.push(n),this.encode_value(e[n],t.struct[n]),this.fieldPath.pop()}},e}(),g=function(){function e(e){this.buffer=new a(e)}return e.prototype.decode=function(e){return this.decode_value(e)},e.prototype.decode_value=function(e){if(\"string\"==typeof e){if(s.includes(e))return this.decode_integer(e);if(\"string\"===e)return this.decode_string();if(\"bool\"===e)return this.decode_boolean()}if(\"object\"==typeof e){if(\"option\"in e)return this.decode_option(e);if(\"enum\"in e)return this.decode_enum(e);if(\"array\"in e)return this.decode_array(e);if(\"set\"in e)return this.decode_set(e);if(\"map\"in e)return this.decode_map(e);if(\"struct\"in e)return this.decode_struct(e)}throw new Error(\"Unsupported type: \".concat(e))},e.prototype.decode_integer=function(e){var t=parseInt(e.substring(1));return t<=32||\"f64\"==e?this.buffer.consume_value(e):this.decode_bigint(t,e.startsWith(\"i\"))},e.prototype.decode_bigint=function(e,t){void 0===t&&(t=!1);var r=e/8,i=new Uint8Array(this.buffer.consume_bytes(r)),n=i.reduceRight((function(e,t){return e+t.toString(16).padStart(2,\"0\")}),\"\");return t&&i[r-1]?BigInt.asIntN(e,BigInt(\"0x\".concat(n))):BigInt(\"0x\".concat(n))},e.prototype.decode_string=function(){var e=this.decode_integer(\"u32\"),t=new Uint8Array(this.buffer.consume_bytes(e));return String.fromCharCode.apply(null,t)},e.prototype.decode_boolean=function(){return this.buffer.consume_value(\"u8\")>0},e.prototype.decode_option=function(e){var t=this.buffer.consume_value(\"u8\");if(1===t)return this.decode_value(e.option);if(0!==t)throw new Error(\"Invalid option \".concat(t));return null},e.prototype.decode_enum=function(e){var t,r=this.buffer.consume_value(\"u8\");if(r>e.enum.length)throw new Error(\"Enum option \".concat(r,\" is not available\"));var i=e.enum[r].struct,n=Object.keys(i)[0];return(t={})[n]=this.decode_value(i[n]),t},e.prototype.decode_array=function(e){for(var t=[],r=e.array.len?e.array.len:this.decode_integer(\"u32\"),i=0;i<r;++i)t.push(this.decode_value(e.array.type));return t},e.prototype.decode_set=function(e){for(var t=this.decode_integer(\"u32\"),r=new Set,i=0;i<t;++i)r.add(this.decode_value(e.set));return r},e.prototype.decode_map=function(e){for(var t=this.decode_integer(\"u32\"),r=new Map,i=0;i<t;++i){var n=this.decode_value(e.map.key),s=this.decode_value(e.map.value);r.set(n,s)}return r},e.prototype.decode_struct=function(e){var t={};for(var r in e.struct)t[r]=this.decode_value(e.struct[r]);return t},e}();function b(e,t,r){return void 0===r&&(r=!0),r&&p(e),new y(r).encode(t,e)}class _{constructor(e){this.tag=1,this.record=e.record,this.content=e.content}serialize(){return b(_.schema,this)}getInstruction(e,t,n,s,o,a,u,c){const h=i.Buffer.from(this.serialize());let f=[];return f.push({pubkey:t,isSigner:!1,isWritable:!1}),f.push({pubkey:n,isSigner:!1,isWritable:!1}),f.push({pubkey:s,isSigner:!0,isWritable:!0}),f.push({pubkey:o,isSigner:!1,isWritable:!0}),f.push({pubkey:a,isSigner:!1,isWritable:!0}),f.push({pubkey:u,isSigner:!0,isWritable:!0}),f.push({pubkey:c,isSigner:!1,isWritable:!1}),new r({keys:f,programId:e,data:h})}}_.schema={struct:{tag:\"u8\",record:\"string\",content:{array:{type:\"u8\"}}}};class v{constructor(e){this.tag=4,this.validation=e.validation,this.signature=e.signature,this.expectedPubkey=e.expectedPubkey}serialize(){return b(v.schema,this)}getInstruction(e,t,n,s,o,a,u,c){const h=i.Buffer.from(this.serialize());let f=[];return f.push({pubkey:t,isSigner:!1,isWritable:!1}),f.push({pubkey:n,isSigner:!1,isWritable:!1}),f.push({pubkey:s,isSigner:!0,isWritable:!0}),f.push({pubkey:o,isSigner:!1,isWritable:!0}),f.push({pubkey:a,isSigner:!1,isWritable:!0}),f.push({pubkey:u,isSigner:!0,isWritable:!0}),f.push({pubkey:c,isSigner:!1,isWritable:!1}),new r({keys:f,programId:e,data:h})}}v.schema={struct:{tag:\"u8\",validation:\"u8\",signature:{array:{type:\"u8\"}},expectedPubkey:{array:{type:\"u8\"}}}};class m{constructor(e){this.tag=3,this.staleness=e.staleness}serialize(){return b(m.schema,this)}getInstruction(e,t,n,s,o,a,u,c,h){const f=i.Buffer.from(this.serialize());let d=[];return d.push({pubkey:t,isSigner:!1,isWritable:!1}),d.push({pubkey:n,isSigner:!1,isWritable:!1}),d.push({pubkey:s,isSigner:!0,isWritable:!0}),d.push({pubkey:o,isSigner:!1,isWritable:!0}),d.push({pubkey:a,isSigner:!1,isWritable:!0}),d.push({pubkey:u,isSigner:!1,isWritable:!0}),d.push({pubkey:c,isSigner:!1,isWritable:!1}),d.push({pubkey:h,isSigner:!0,isWritable:!0}),new r({keys:d,programId:e,data:f})}}m.schema={struct:{tag:\"u8\",staleness:\"bool\"}};class w{constructor(e){this.tag=2,this.record=e.record,this.content=e.content}serialize(){return b(w.schema,this)}getInstruction(e,t,n,s,o,a,u,c){const h=i.Buffer.from(this.serialize());let f=[];return f.push({pubkey:t,isSigner:!1,isWritable:!1}),f.push({pubkey:n,isSigner:!1,isWritable:!1}),f.push({pubkey:s,isSigner:!0,isWritable:!0}),f.push({pubkey:o,isSigner:!1,isWritable:!0}),f.push({pubkey:a,isSigner:!1,isWritable:!0}),f.push({pubkey:u,isSigner:!0,isWritable:!0}),f.push({pubkey:c,isSigner:!1,isWritable:!1}),new r({keys:f,programId:e,data:h})}}w.schema={struct:{tag:\"u8\",record:\"string\",content:{array:{type:\"u8\"}}}};class k{constructor(){this.tag=5}serialize(){return b(k.schema,this)}getInstruction(e,t,n,s,o,a,u,c){const h=i.Buffer.from(this.serialize());let f=[];return f.push({pubkey:t,isSigner:!1,isWritable:!1}),f.push({pubkey:n,isSigner:!1,isWritable:!1}),f.push({pubkey:s,isSigner:!0,isWritable:!0}),f.push({pubkey:o,isSigner:!1,isWritable:!0}),f.push({pubkey:a,isSigner:!1,isWritable:!0}),f.push({pubkey:u,isSigner:!0,isWritable:!0}),f.push({pubkey:c,isSigner:!1,isWritable:!1}),new r({keys:f,programId:e,data:h})}}k.schema={struct:{tag:\"u8\"}};class S{constructor(e){this.tag=6,this.roaId=e.roaId}serialize(){return b(S.schema,this)}getInstruction(e,t,n,s,o,a,u,c){const h=i.Buffer.from(this.serialize());let f=[];return f.push({pubkey:t,isSigner:!1,isWritable:!1}),f.push({pubkey:n,isSigner:!1,isWritable:!1}),f.push({pubkey:s,isSigner:!0,isWritable:!0}),f.push({pubkey:o,isSigner:!1,isWritable:!0}),f.push({pubkey:a,isSigner:!1,isWritable:!0}),f.push({pubkey:u,isSigner:!0,isWritable:!0}),f.push({pubkey:c,isSigner:!1,isWritable:!1}),new r({keys:f,programId:e,data:h})}}S.schema={struct:{tag:\"u8\",roaId:{array:{type:\"u8\"}}}};const I=new e(\"HP3D4D1ZCmohQGFVms2SS4LCANgJyksBf5s1F77FuFjZ\"),[A]=e.findProgramAddressSync([I.toBuffer()],I),W=(e,r,i,n,s,o,a,u)=>new _({record:o,content:Array.from(a)}).getInstruction(u,t.programId,s,e,r,i,n,A),j=(e,r,i,n,s,o)=>(new k).getInstruction(o,t.programId,s,e,n,r,i,A),E=(e,r,i,n,s,o,a,u)=>new w({record:o,content:Array.from(a)}).getInstruction(u,t.programId,s,e,r,i,n,A),z=(e,r,i,n,s,o,a,u,c)=>new v({validation:o,signature:Array.from(a),expectedPubkey:Array.from(u)}).getInstruction(c,t.programId,s,e,r,i,n,A),P=(e,r,i,n,s,o,a,u)=>new m({staleness:a}).getInstruction(u,t.programId,o,e,r,i,n,A,s),O=(e,r,i,n,s,o,a)=>new S({roaId:Array.from(o.toBuffer())}).getInstruction(a,t.programId,r,e,i,n,s,A);var B,R;(R=B||(B={}))[R.None=0]=\"None\",R[R.Solana=1]=\"Solana\",R[R.Ethereum=2]=\"Ethereum\",R[R.UnverifiedSolana=3]=\"UnverifiedSolana\";const x=e=>{switch(e){case B.None:return 0;case B.Ethereum:return 20;case B.Solana:case B.UnverifiedSolana:return 32;default:throw new Error(\"Invalid validation enum\")}};class U{constructor(e){this.stalenessValidation=e.stalenessValidation,this.rightOfAssociationValidation=e.rightOfAssociationValidation,this.contentLength=e.contentLength}static deserialize(e){return new U((t=this.schema,r=e,void 0===(i=!0)&&(i=!0),i&&p(t),new g(r).decode(t)));var t,r,i}static async retrieve(e,t){const r=await e.getAccountInfo(t);if(!r||!r.data)throw new Error(\"Record header account not found\");return this.deserialize(r.data.slice(96,96+this.LEN))}}U.LEN=8,U.schema={struct:{stalenessValidation:\"u16\",rightOfAssociationValidation:\"u16\",contentLength:\"u32\"}};class V{constructor(e,t){this.data=t,this.header=e}static deserialize(e){const t=U.deserialize(e.slice(96,96+U.LEN)),r=e.slice(96+U.LEN);return new V(t,r)}static async retrieve(e,t){const r=await e.getAccountInfo(t);if(!r||!r.data)throw new Error(\"Record header account not found\");return this.deserialize(r.data)}static async retrieveBatch(e,t){return(await e.getMultipleAccountsInfo(t)).map((e=>{if(null==e?void 0:e.data)return this.deserialize(e.data)}))}getContent(){let e=x(this.header.stalenessValidation)+x(this.header.rightOfAssociationValidation);return this.data.slice(e)}getStalenessId(){let e=x(this.header.stalenessValidation);return this.data.slice(0,e)}getRoAId(){let e=x(this.header.stalenessValidation),t=e+x(this.header.rightOfAssociationValidation);return this.data.slice(e,t)}}export{A as CENTRAL_STATE_SNS_RECORDS,V as Record,U as RecordHeader,I as SNS_RECORDS_ID,B as Validation,W as allocateAndPostRecord,_ as allocateAndPostRecordInstruction,j as deleteRecord,k as deleteRecordInstruction,E as editRecord,w as editRecordInstruction,x as getValidationLength,z as validateEthSignature,v as validateEthereumSignatureInstruction,P as validateSolanaSignature,m as validateSolanaSignatureInstruction,O as writeRoa,S as writeRoaInstruction};\n//# sourceMappingURL=index.mjs.map\n", null, null, "function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map", "export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map", "import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map", null, null, null, null, null, null, null, null, null, "import { Layout } from '@solana/buffer-layout';\n\nexport interface EncodeDecode<T> {\n    decode(buffer: Buffer, offset?: number): T;\n    encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nexport const encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n", "import { blob, Layout } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base';\n\nexport const bigInt =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntLE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferLE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const bigIntBE =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntBE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferBE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const u64 = bigInt(8);\n\nexport const u64be = bigIntBE(8);\n\nexport const u128 = bigInt(16);\n\nexport const u128be = bigIntBE(16);\n\nexport const u192 = bigInt(24);\n\nexport const u192be = bigIntBE(24);\n\nexport const u256 = bigInt(32);\n\nexport const u256be = bigIntBE(32);\n", "/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n", "import { Layout } from '@solana/buffer-layout';\nimport BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base';\nimport { u128 } from './bigint';\n\nexport const WAD = new BigNumber('1e+18');\n\nexport const decimal = (property?: string): Layout<BigNumber> => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const decimalLayout = layout as Layout<unknown> as Layout<BigNumber>;\n\n    decimalLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n\n    decimalLayout.encode = (decimal: BigNumber, buffer: Buffer, offset: number) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n\n    return decimalLayout;\n};\n", "import { Layout, u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base';\n\nexport const bool = (property?: string): Layout<boolean> => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const boolLayout = layout as Layout<unknown> as Layout<boolean>;\n\n    boolLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n\n    boolLayout.encode = (bool: boolean, buffer: Buffer, offset: number) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n\n    return boolLayout;\n};\n", "import { blob, Layout } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base';\n\nexport const publicKey = (property?: string): Layout<PublicKey> => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const publicKeyLayout = layout as Layout<unknown> as Layout<PublicKey>;\n\n    publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n\n    publicKeyLayout.encode = (publicKey: PublicKey, buffer: Buffer, offset: number) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n\n    return publicKeyLayout;\n};\n", "import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Token account state as stored by the program */\nexport var AccountState;\n(function (AccountState) {\n    AccountState[AccountState[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountState[AccountState[\"Initialized\"] = 1] = \"Initialized\";\n    AccountState[AccountState[\"Frozen\"] = 2] = \"Frozen\";\n})(AccountState || (AccountState = {}));\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(connection, addresses, commitment, programId = TOKEN_PROGRAM_ID) {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(connection, commitment) {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(connection, extensions, commitment) {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account)\n            throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n//# sourceMappingURL=account.js.map", null, null, null, null, null, "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            const rounded = Math.floor(digitBase / to);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexport const utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexport const base16 = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64nopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));\nexport const base64url = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexport const base64urlnopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = /* @__PURE__ */ genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = /* @__PURE__ */ genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const createBase58check = /* @__PURE__ */ (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\n// legacy export, bad name\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        if (prefix.length === 0)\n            throw new TypeError(`Invalid prefix length ${prefix.length}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        const sepIndex = lowered.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = lowered.slice(0, sepIndex);\n        const data = lowered.slice(sepIndex + 1);\n        if (data.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(data).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!data.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = /* @__PURE__ */ genBech32('bech32');\nexport const bech32m = /* @__PURE__ */ genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n//# sourceMappingURL=index.js.map", "'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n", "var e=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{};function o(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}export{e as commonjsGlobal,o as getDefaultExportFromCjs};\n//# sourceMappingURL=_commonjsHelpers.mjs.map\n", "var e={exports:{}};export{e as __module};\n//# sourceMappingURL=ipaddr.mjs.map\n", "(function (root) {\n    'use strict';\n    // A list of regular expressions that match arbitrary IPv4 addresses,\n    // for which a number of weird notations exist.\n    // Note that an address like 0010.0xa5.1.1 is considered legal.\n    const ipv4Part = '(0?\\\\d+|0x[a-f0-9]+)';\n    const ipv4Regexes = {\n        fourOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        threeOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        twoOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        longValue: new RegExp(`^${ipv4Part}$`, 'i')\n    };\n\n    // Regular Expression for checking Octal numbers\n    const octalRegex = new RegExp(`^0[0-7]+$`, 'i');\n    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, 'i');\n\n    const zoneIndex = '%[0-9a-z]{1,}';\n\n    // IPv6-matching regular expressions.\n    // For IPv6, the task is simpler: it is enough to match the colon-delimited\n    // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at\n    // the end.\n    const ipv6Part = '(?:[0-9a-f]+::?)+';\n    const ipv6Regexes = {\n        zoneIndex: new RegExp(zoneIndex, 'i'),\n        'native': new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, 'i'),\n        deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?)$`, 'i'),\n        transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?$`, 'i')\n    };\n\n    // Expand :: in an IPv6 address or address part consisting of `parts` groups.\n    function expandIPv6 (string, parts) {\n        // More than one '::' means invalid adddress\n        if (string.indexOf('::') !== string.lastIndexOf('::')) {\n            return null;\n        }\n\n        let colonCount = 0;\n        let lastColon = -1;\n        let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];\n        let replacement, replacementCount;\n\n        // Remove zone index and save it for later\n        if (zoneId) {\n            zoneId = zoneId.substring(1);\n            string = string.replace(/%.+$/, '');\n        }\n\n        // How many parts do we already have?\n        while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n            colonCount++;\n        }\n\n        // 0::0 is two parts more than ::\n        if (string.substr(0, 2) === '::') {\n            colonCount--;\n        }\n\n        if (string.substr(-2, 2) === '::') {\n            colonCount--;\n        }\n\n        // The following loop would hang if colonCount > parts\n        if (colonCount > parts) {\n            return null;\n        }\n\n        // replacement = ':' + '0:' * (parts - colonCount)\n        replacementCount = parts - colonCount;\n        replacement = ':';\n        while (replacementCount--) {\n            replacement += '0:';\n        }\n\n        // Insert the missing zeroes\n        string = string.replace('::', replacement);\n\n        // Trim any garbage which may be hanging around if :: was at the edge in\n        // the source strin\n        if (string[0] === ':') {\n            string = string.slice(1);\n        }\n\n        if (string[string.length - 1] === ':') {\n            string = string.slice(0, -1);\n        }\n\n        parts = (function () {\n            const ref = string.split(':');\n            const results = [];\n\n            for (let i = 0; i < ref.length; i++) {\n                results.push(parseInt(ref[i], 16));\n            }\n\n            return results;\n        })();\n\n        return {\n            parts: parts,\n            zoneId: zoneId\n        };\n    }\n\n    // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.\n    function matchCIDR (first, second, partSize, cidrBits) {\n        if (first.length !== second.length) {\n            throw new Error('ipaddr: cannot match CIDR for objects with different lengths');\n        }\n\n        let part = 0;\n        let shift;\n\n        while (cidrBits > 0) {\n            shift = partSize - cidrBits;\n            if (shift < 0) {\n                shift = 0;\n            }\n\n            if (first[part] >> shift !== second[part] >> shift) {\n                return false;\n            }\n\n            cidrBits -= partSize;\n            part += 1;\n        }\n\n        return true;\n    }\n\n    function parseIntAuto (string) {\n        // Hexadedimal base 16 (0x#)\n        if (hexRegex.test(string)) {\n            return parseInt(string, 16);\n        }\n        // While octal representation is discouraged by ECMAScript 3\n        // and forbidden by ECMAScript 5, we silently allow it to\n        // work only if the rest of the string has numbers less than 8.\n        if (string[0] === '0' && !isNaN(parseInt(string[1], 10))) {\n        if (octalRegex.test(string)) {\n            return parseInt(string, 8);\n        }\n            throw new Error(`ipaddr: cannot parse ${string} as octal`);\n        }\n        // Always include the base 10 radix!\n        return parseInt(string, 10);\n    }\n\n    function padPart (part, length) {\n        while (part.length < length) {\n            part = `0${part}`;\n        }\n\n        return part;\n    }\n\n    const ipaddr = {};\n\n    // An IPv4 address (RFC791).\n    ipaddr.IPv4 = (function () {\n        // Constructs a new IPv4 address from an array of four octets\n        // in network order (MSB first)\n        // Verifies the input.\n        function IPv4 (octets) {\n            if (octets.length !== 4) {\n                throw new Error('ipaddr: ipv4 octet count should be 4');\n            }\n\n            let i, octet;\n\n            for (i = 0; i < octets.length; i++) {\n                octet = octets[i];\n                if (!((0 <= octet && octet <= 255))) {\n                    throw new Error('ipaddr: ipv4 octet should fit in 8 bits');\n                }\n            }\n\n            this.octets = octets;\n        }\n\n        // Special IPv4 address ranges.\n        // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses\n        IPv4.prototype.SpecialRanges = {\n            unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n            broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n            // RFC3171\n            multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n            // RFC3927\n            linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n            // RFC5735\n            loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n            // RFC6598\n            carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n            // RFC1918\n            'private': [\n                [new IPv4([10, 0, 0, 0]), 8],\n                [new IPv4([172, 16, 0, 0]), 12],\n                [new IPv4([192, 168, 0, 0]), 16]\n            ],\n            // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700\n            reserved: [\n                [new IPv4([192, 0, 0, 0]), 24],\n                [new IPv4([192, 0, 2, 0]), 24],\n                [new IPv4([192, 88, 99, 0]), 24],\n                [new IPv4([198, 18, 0, 0]), 15],\n                [new IPv4([198, 51, 100, 0]), 24],\n                [new IPv4([203, 0, 113, 0]), 24],\n                [new IPv4([240, 0, 0, 0]), 4]\n            ],\n            // RFC7534, RFC7535\n            as112: [\n                [new IPv4([192, 175, 48, 0]), 24],\n                [new IPv4([192, 31, 196, 0]), 24],\n            ],\n            // RFC7450\n            amt: [\n                [new IPv4([192, 52, 193, 0]), 24],\n            ],\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv4.prototype.kind = function () {\n            return 'ipv4';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv4.prototype.match = function (other, cidrRange) {\n            let ref;\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv4') {\n                throw new Error('ipaddr: cannot match ipv4 address with non-ipv4 one');\n            }\n\n            return matchCIDR(this.octets, other.octets, 8, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv4 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv4.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 8,\n                128: 7,\n                192: 6,\n                224: 5,\n                240: 4,\n                248: 3,\n                252: 2,\n                254: 1,\n                255: 0\n            };\n            let i, octet, zeros;\n\n            for (i = 3; i >= 0; i -= 1) {\n                octet = this.octets[i];\n                if (octet in zerotable) {\n                    zeros = zerotable[octet];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 8) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 32 - cidr;\n        };\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv4.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv4.prototype.toByteArray = function () {\n            return this.octets.slice(0);\n        };\n\n        // Converts this IPv4 address to an IPv4-mapped IPv6 address.\n        IPv4.prototype.toIPv4MappedAddress = function () {\n            return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);\n        };\n\n        // Symmetrical method strictly for aligning with the IPv6 methods.\n        IPv4.prototype.toNormalizedString = function () {\n            return this.toString();\n        };\n\n        // Returns the address in convenient, decimal-dotted format.\n        IPv4.prototype.toString = function () {\n            return this.octets.join('.');\n        };\n\n        return IPv4;\n    })();\n\n    // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {\n\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 4) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Checks if a given string is formatted like IPv4 address.\n    ipaddr.IPv4.isIPv4 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks if a given string is a valid IPv4 address.\n    ipaddr.IPv4.isValid = function (string) {\n        try {\n            new this(this.parser(string));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a valid IPv4 address in CIDR notation.\n    ipaddr.IPv4.isValidCIDR = function (string) {\n        try {\n            this.parseCIDR(string);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a full four-part IPv4 Address.\n    ipaddr.IPv4.isValidFourPartDecimal = function (string) {\n        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 4) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Tries to parse and validate a string with IPv4 address.\n    // Throws an error if it fails.\n    ipaddr.IPv4.parse = function (string) {\n        const parts = this.parser(string);\n\n        if (parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv4 Address');\n        }\n\n        return new this(parts);\n    };\n\n    // Parses the string as an IPv4 Address with CIDR Notation.\n    ipaddr.IPv4.parseCIDR = function (string) {\n        let match;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            const maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 32) {\n                const parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv4 CIDR range');\n    };\n\n    // Classful variants (like a.b, where a is an octet, and b is a 24-bit\n    // value representing last three octets; this corresponds to a class C\n    // address) are omitted due to classless nature of modern Internet.\n    ipaddr.IPv4.parser = function (string) {\n        let match, part, value;\n\n        // parseInt recognizes all that octal & hexadecimal weirdness for us\n        if ((match = string.match(ipv4Regexes.fourOctet))) {\n            return (function () {\n                const ref = match.slice(1, 6);\n                const results = [];\n\n                for (let i = 0; i < ref.length; i++) {\n                    part = ref[i];\n                    results.push(parseIntAuto(part));\n                }\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.longValue))) {\n            value = parseIntAuto(match[1]);\n            if (value > 0xffffffff || value < 0) {\n                throw new Error('ipaddr: address outside defined range');\n            }\n\n            return ((function () {\n                const results = [];\n                let shift;\n\n                for (shift = 0; shift <= 24; shift += 8) {\n                    results.push((value >> shift) & 0xff);\n                }\n\n                return results;\n            })()).reverse();\n        } else if ((match = string.match(ipv4Regexes.twoOctet))) {\n            return (function () {\n                const ref = match.slice(1, 4);\n                const results = [];\n\n                value = parseIntAuto(ref[1]);\n                if (value > 0xffffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push((value >> 16) & 0xff);\n                results.push((value >>  8) & 0xff);\n                results.push( value        & 0xff);\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.threeOctet))) {\n            return (function () {\n                const ref = match.slice(1, 5);\n                const results = [];\n\n                value = parseIntAuto(ref[2]);\n                if (value > 0xffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push(parseIntAuto(ref[1]));\n                results.push((value >> 8) & 0xff);\n                results.push( value       & 0xff);\n\n                return results;\n            })();\n        } else {\n            return null;\n        }\n    };\n\n    // A utility function to return subnet mask in IPv4 format given the prefix length\n    ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 32) {\n            throw new Error('ipaddr: invalid IPv4 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 4) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // An IPv6 address (RFC2460)\n    ipaddr.IPv6 = (function () {\n        // Constructs an IPv6 address from an array of eight 16 - bit parts\n        // or sixteen 8 - bit parts in network order(MSB first).\n        // Throws an error if the input is invalid.\n        function IPv6 (parts, zoneId) {\n            let i, part;\n\n            if (parts.length === 16) {\n                this.parts = [];\n                for (i = 0; i <= 14; i += 2) {\n                    this.parts.push((parts[i] << 8) | parts[i + 1]);\n                }\n            } else if (parts.length === 8) {\n                this.parts = parts;\n            } else {\n                throw new Error('ipaddr: ipv6 part count should be 8 or 16');\n            }\n\n            for (i = 0; i < this.parts.length; i++) {\n                part = this.parts[i];\n                if (!((0 <= part && part <= 0xffff))) {\n                    throw new Error('ipaddr: ipv6 part should fit in 16 bits');\n                }\n            }\n\n            if (zoneId) {\n                this.zoneId = zoneId;\n            }\n        }\n\n        // Special IPv6 ranges\n        IPv6.prototype.SpecialRanges = {\n            // RFC4291, here and after\n            unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n            linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n            multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n            loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n            uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n            ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n            // RFC6666\n            discard: [new IPv6([0x100, 0, 0, 0, 0, 0, 0, 0]), 64],\n            // RFC6145\n            rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n            // RFC6052\n            rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n            // RFC3056\n            '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n            // RFC6052, RFC6146\n            teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n            // RFC5180\n            benchmarking: [new IPv6([0x2001, 0x2, 0, 0, 0, 0, 0, 0]), 48],\n            // RFC7450\n            amt: [new IPv6([0x2001, 0x3, 0, 0, 0, 0, 0, 0]), 32],\n            as112v6: [\n                [new IPv6([0x2001, 0x4, 0x112, 0, 0, 0, 0, 0]), 48],\n                [new IPv6([0x2620, 0x4f, 0x8000, 0, 0, 0, 0, 0]), 48],\n            ],\n            deprecated: [new IPv6([0x2001, 0x10, 0, 0, 0, 0, 0, 0]), 28],\n            orchid2: [new IPv6([0x2001, 0x20, 0, 0, 0, 0, 0, 0]), 28],\n            droneRemoteIdProtocolEntityTags: [new IPv6([0x2001, 0x30, 0, 0, 0, 0, 0, 0]), 28],\n            reserved: [\n                // RFC3849\n                [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 23],\n                // RFC2928\n                [new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32],\n            ],\n        };\n\n        // Checks if this address is an IPv4-mapped IPv6 address.\n        IPv6.prototype.isIPv4MappedAddress = function () {\n            return this.range() === 'ipv4Mapped';\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv6.prototype.kind = function () {\n            return 'ipv6';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv6.prototype.match = function (other, cidrRange) {\n            let ref;\n\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv6') {\n                throw new Error('ipaddr: cannot match ipv6 address with non-ipv6 one');\n            }\n\n            return matchCIDR(this.parts, other.parts, 16, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv6 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv6.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 16,\n                32768: 15,\n                49152: 14,\n                57344: 13,\n                61440: 12,\n                63488: 11,\n                64512: 10,\n                65024: 9,\n                65280: 8,\n                65408: 7,\n                65472: 6,\n                65504: 5,\n                65520: 4,\n                65528: 3,\n                65532: 2,\n                65534: 1,\n                65535: 0\n            };\n            let part, zeros;\n\n            for (let i = 7; i >= 0; i -= 1) {\n                part = this.parts[i];\n                if (part in zerotable) {\n                    zeros = zerotable[part];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 16) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 128 - cidr;\n        };\n\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv6.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv6.prototype.toByteArray = function () {\n            let part;\n            const bytes = [];\n            const ref = this.parts;\n            for (let i = 0; i < ref.length; i++) {\n                part = ref[i];\n                bytes.push(part >> 8);\n                bytes.push(part & 0xff);\n            }\n\n            return bytes;\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:0db8:0008:0066:0000:0000:0000:0001\n        IPv6.prototype.toFixedLengthString = function () {\n            const addr = ((function () {\n                const results = [];\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(padPart(this.parts[i].toString(16), 4));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.\n        // Throws an error otherwise.\n        IPv6.prototype.toIPv4Address = function () {\n            if (!this.isIPv4MappedAddress()) {\n                throw new Error('ipaddr: trying to convert a generic ipv6 address to ipv4');\n            }\n\n            const ref = this.parts.slice(-2);\n            const high = ref[0];\n            const low = ref[1];\n\n            return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:db8:8:66:0:0:0:1\n        //\n        // Deprecated: use toFixedLengthString() instead.\n        IPv6.prototype.toNormalizedString = function () {\n            const addr = ((function () {\n                const results = [];\n\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(this.parts[i].toString(16));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)\n        IPv6.prototype.toRFC5952String = function () {\n            const regex = /((^|:)(0(:|$)){2,})/g;\n            const string = this.toNormalizedString();\n            let bestMatchIndex = 0;\n            let bestMatchLength = -1;\n            let match;\n\n            while ((match = regex.exec(string))) {\n                if (match[0].length > bestMatchLength) {\n                    bestMatchIndex = match.index;\n                    bestMatchLength = match[0].length;\n                }\n            }\n\n            if (bestMatchLength < 0) {\n                return string;\n            }\n\n            return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        // Calls toRFC5952String under the hood.\n        IPv6.prototype.toString = function () {\n            return this.toRFC5952String();\n        };\n\n        return IPv6;\n\n    })();\n\n    // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.broadcastAddressFromCIDR = function (string) {\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 16) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Checks if a given string is formatted like IPv6 address.\n    ipaddr.IPv6.isIPv6 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks to see if string is a valid IPv6 Address\n    ipaddr.IPv6.isValid = function (string) {\n\n        // Since IPv6.isValid is always called first, this shortcut\n        // provides a substantial performance gain.\n        if (typeof string === 'string' && string.indexOf(':') === -1) {\n            return false;\n        }\n\n        try {\n            const addr = this.parser(string);\n            new this(addr.parts, addr.zoneId);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a valid IPv6 address in CIDR notation.\n    ipaddr.IPv6.isValidCIDR = function (string) {\n\n        // See note in IPv6.isValid\n        if (typeof string === 'string' && string.indexOf(':') === -1) {\n            return false;\n        }\n\n        try {\n            this.parseCIDR(string);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 16) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Tries to parse and validate a string with IPv6 address.\n    // Throws an error if it fails.\n    ipaddr.IPv6.parse = function (string) {\n        const addr = this.parser(string);\n\n        if (addr.parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv6 Address');\n        }\n\n        return new this(addr.parts, addr.zoneId);\n    };\n\n    ipaddr.IPv6.parseCIDR = function (string) {\n        let maskLength, match, parsed;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 128) {\n                parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv6 CIDR range');\n    };\n\n    // Parse an IPv6 address.\n    ipaddr.IPv6.parser = function (string) {\n        let addr, i, match, octet, octets, zoneId;\n\n        if ((match = string.match(ipv6Regexes.deprecatedTransitional))) {\n            return this.parser(`::ffff:${match[1]}`);\n        }\n        if (ipv6Regexes.native.test(string)) {\n            return expandIPv6(string, 8);\n        }\n        if ((match = string.match(ipv6Regexes.transitional))) {\n            zoneId = match[6] || '';\n            addr = match[1]\n            if (!match[1].endsWith('::')) {\n                addr = addr.slice(0, -1)\n            }\n            addr = expandIPv6(addr + zoneId, 6);\n            if (addr.parts) {\n                octets = [\n                    parseInt(match[2]),\n                    parseInt(match[3]),\n                    parseInt(match[4]),\n                    parseInt(match[5])\n                ];\n                for (i = 0; i < octets.length; i++) {\n                    octet = octets[i];\n                    if (!((0 <= octet && octet <= 255))) {\n                        return null;\n                    }\n                }\n\n                addr.parts.push(octets[0] << 8 | octets[1]);\n                addr.parts.push(octets[2] << 8 | octets[3]);\n                return {\n                    parts: addr.parts,\n                    zoneId: addr.zoneId\n                };\n            }\n        }\n\n        return null;\n    };\n\n    // A utility function to return subnet mask in IPv6 format given the prefix length\n    ipaddr.IPv6.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 128) {\n            throw new Error('ipaddr: invalid IPv6 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 16) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // Try to parse an array in network order (MSB first) for IPv4 and IPv6\n    ipaddr.fromByteArray = function (bytes) {\n        const length = bytes.length;\n\n        if (length === 4) {\n            return new ipaddr.IPv4(bytes);\n        } else if (length === 16) {\n            return new ipaddr.IPv6(bytes);\n        } else {\n            throw new Error('ipaddr: the binary input is neither an IPv6 nor IPv4 address');\n        }\n    };\n\n    // Checks if the address is valid IP address\n    ipaddr.isValid = function (string) {\n        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n    };\n\n    // Checks if the address is valid IP address in CIDR notation\n    ipaddr.isValidCIDR = function (string) {\n        return ipaddr.IPv6.isValidCIDR(string) || ipaddr.IPv4.isValidCIDR(string);\n    };\n\n\n    // Attempts to parse an IP Address, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parse = function (string) {\n        if (ipaddr.IPv6.isValid(string)) {\n            return ipaddr.IPv6.parse(string);\n        } else if (ipaddr.IPv4.isValid(string)) {\n            return ipaddr.IPv4.parse(string);\n        } else {\n            throw new Error('ipaddr: the address has neither IPv6 nor IPv4 format');\n        }\n    };\n\n    // Attempt to parse CIDR notation, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parseCIDR = function (string) {\n        try {\n            return ipaddr.IPv6.parseCIDR(string);\n        } catch (e) {\n            try {\n                return ipaddr.IPv4.parseCIDR(string);\n            } catch (e2) {\n                throw new Error('ipaddr: the address has neither IPv6 nor IPv4 CIDR format');\n            }\n        }\n    };\n\n    // Parse an address and return plain IPv4 address if it is an IPv4-mapped address\n    ipaddr.process = function (string) {\n        const addr = this.parse(string);\n\n        if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n            return addr.toIPv4Address();\n        } else {\n            return addr;\n        }\n    };\n\n    // An utility function to ease named range matching. See examples below.\n    // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors\n    // on matching IPv4 addresses to IPv6 ranges or vice versa.\n    ipaddr.subnetMatch = function (address, rangeList, defaultName) {\n        let i, rangeName, rangeSubnets, subnet;\n\n        if (defaultName === undefined || defaultName === null) {\n            defaultName = 'unicast';\n        }\n\n        for (rangeName in rangeList) {\n            if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {\n                rangeSubnets = rangeList[rangeName];\n                // ECMA5 Array.isArray isn't available everywhere\n                if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n                    rangeSubnets = [rangeSubnets];\n                }\n\n                for (i = 0; i < rangeSubnets.length; i++) {\n                    subnet = rangeSubnets[i];\n                    if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {\n                        return rangeName;\n                    }\n                }\n            }\n        }\n\n        return defaultName;\n    };\n\n    // Export for both the CommonJS and browser-like environment\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = ipaddr;\n\n    } else {\n        root.ipaddr = ipaddr;\n    }\n\n}(this));\n", null, null, null, null, null, null, null, "const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map", "import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    const inBig = (n) => typeof n === 'bigint' && _0n < n; // n in [1..]\n    const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max))\n            return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex))\n                throw new Error('x required');\n            if (!in0MaskRange(ey))\n                throw new Error('y required');\n            if (!in0MaskRange(ez))\n                throw new Error('z required');\n            if (!in0MaskRange(et))\n                throw new Error('t required');\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y))\n                throw new Error('invalid affine point');\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0())\n                throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right)\n                throw new Error('bad point: equation left != right (1)');\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT)\n                throw new Error('bad point: equation left != right (2)');\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n)\n                return I;\n            if (this.equals(I) || n === _1n)\n                return this;\n            if (this.equals(G))\n                return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null)\n                iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0)\n                return { x: _0n, y: _1n };\n            if (zz !== _1n)\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            if (y === _0n) {\n                // y=0 is allowed\n            }\n            else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215)\n                    assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else\n                    assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = Field(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: BigInt(8),\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n};\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n    prehash: sha512,\n});\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map", null, null, null, null, null, null, null, null, null, "import { PublicKey } from '@solana/web3.js';\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId) {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n//# sourceMappingURL=constants.js.map", "/** Base class for errors */\nexport class TokenError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenAccountNotFoundError';\n    }\n}\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountError';\n    }\n}\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountDataError';\n    }\n}\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountOwnerError';\n    }\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountSizeError';\n    }\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidMintError';\n    }\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidOwnerError';\n    }\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenOwnerOffCurveError';\n    }\n}\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionProgramError';\n    }\n}\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionKeysError';\n    }\n}\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionDataError';\n    }\n}\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionTypeError';\n    }\n}\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenUnsupportedInstructionError';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountNotFound';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookInvalidSeed';\n    }\n}\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountDataNotFound';\n    }\n}\n//# sourceMappingURL=errors.js.map", "export var AccountType;\n(function (AccountType) {\n    AccountType[AccountType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountType[AccountType[\"Mint\"] = 1] = \"Mint\";\n    AccountType[AccountType[\"Account\"] = 2] = \"Account\";\n})(AccountType || (AccountType = {}));\nexport const ACCOUNT_TYPE_SIZE = 1;\n//# sourceMappingURL=accountType.js.map", "import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const multisig = MultisigLayout.decode(info.data);\n    return { address, ...multisig };\n}\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n//# sourceMappingURL=multisig.js.map", "import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, TokenInvalidMintError, TokenOwnerOffCurveError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint)\n            throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(connection, commitment) {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n//# sourceMappingURL=mint.js.map", "import { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);\n}\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);\n}\nfunction buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(nestedAssociatedToken, nestedMint, destinationAssociatedToken, ownerAssociatedToken, ownerMint, owner, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n//# sourceMappingURL=associatedTokenAccount.js.map", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "var v=\"ABAOAAAAAACwiAAAAYkHdvjtnH+IFkUYxx/v3vPe7uw8UkjsD43ChKICDQsT3iIJy4gSiZAjkn5JUFlaiFmjccT9ESkpGBGVIlQgWSkY/QDBoMgrQv0jRJDAfkCXhUmgRX23d4ebnndmd3Z3ZnfVeeDDzM7MPs8zv57Zd2+5hd1Ed4ClYAisBuuUsqLpMHgJjIBNFu1fBW8l1O8AO8Ee8Cn4HIyCg+CI0u4Y+AmMgVPgDOhuEHWBPjAZXAy2gjfA9kb73hlx+i7SK8AHYDf4BOwHB8AoOAyOguPgB/ArOKlcnwHdPe32/Uin9LTvvwTph0gv62nbubKnXT+nZ1z/DcjfFF8vQno7uEaxH923BGVXN9v5Zcgvj/VFPIT8Y/H1k0jXxPn1SEfARjBdab8V+TfB22CXUh5xd3OcZTH3g6di1LZJbLNs55q96M9n4J9Gm6hsfzQvcT8fbfy//TyUf8vG4Lses/5jcd2PSE/IcQan4/o/UXYadE0kaoJBMG1ivNbidNbETr1XoWyuplwyHFN0fFai/8/EY7BIKY/68EpCvwP+mc/m/2vNGnBhp1eZ51bCmgsEAoFAIBAIBAKBQKAO3Irfrg3lfc4qi/cXd+Kee5TfvAd6ieY0ie5D2cNx+eNInwZLmu33gWuRn4/8C3H9CNJNYEt8/TrS35HuSPktvRP1z0LPOvAceB4IsB5saIa6UBfqQl2oc123AjwBVjWrP7MCgcC5y/ue/56yqXv87+qcIU2Z+ny8tuHHpyxsvrDNITDXgqkDRJcPdJY/wMo24/oQmDqZaPHkdplAuhv8ApqDRDeCVj/OAvD9BUSX9qF8Qpt7lTxnZ7+5TmVtrGMM7XchP3sS0SNgGzg4yU5HIBAIBM5NfsO5QDgfjuM54STOw7/Az/F3QtfhfF4Qn9F/gxMouxm/WU7F9afBQuUM7+rtPF+jb0b6ese/I7sI+emadhEzUT5bqbsW+esNbSMWoG6hWo/8gOLPUqUu+v5rKEHX8oS6iEXQexd7XlmBe1aCNWAp6kSsYyjHc82Liv2Xkd/C/HkN1w/Geren+KryToa2PtlQg2c9zijGZnGJ9kaibzZh84jmmfx4TeYpK9H3usMKqxnDCWxsdLY/3ygy9h+l/LYbYHtuXw2/rfsSPo0a/Jrn6PvPrzL2+7CmfV88lkc9j+F7cRzYU4N48DF8uA3n/T7Fly9q4Jdvoth0uLf9LORC11hvO/0D6RnQfRa99+2Hr1NS/M26VvfEe2jaWTAOvG8zzgKf8zCrYL++qUEfbumeQAjTVnQp+QmW99gQpDoJ4+9uHZe5/l3OW/M8x6WUZaduUvUc5p13NTXlz3VpGbCVrGNe5zOnjvGlrDWY1IdWShuuQ9fWh6h+VSV1Wit1lvNhHFz1zeUYtCg5ntvOSStDW5cITRnF5RJ+rcasJHExztwu910tl6LzLYsvuvvzilB0mvSaxt/V+SY0EMurfkjbrTjfInf+FJGkNdzSlOukZaDo3snqs7RZpqj2Gx7sS52D5O79k+93W2W/T3NhQxe3VeF16pwn4eI8qev7Sl1s0PnPy5PalSV57Pp6XuDxrypR9wBR8nOCzm/eXuYp5d4s/lV1XvL+lG2b+2AaQ1nPr23Hrc7z0WT5qvZL0v7QtdX5zdu6HMei+gV1ri8et4XSVpCfdeB7fRWNRy79UP0RCT4Jyre/88bbKsQUawUrV69dxjd+nlXxbCKos79pz1BpOqucz0gEdZ5hMk+aa7Wdy/7xZ5Yqhc+nyHivrkyQ/reM7tziuFojfM7zxtq0505XYutvHrtVnzNl2ONrTGdPkLv9ZjNHOoShnCh5nLLYKOKfK4qK7bjx/gqyj9lFJc2Wz/HIqyMSYaGnqM8+xp6vB1/6feg22UmLFUno1rurvelz7yT1UVfORW3L7+d6fMcAXdzxIVK3TNNioZpSyj2242izpky6y5S0fpr6q5ZXJT7O1qrmQRVB+rkQ1Dk3vvYttyGoc+51/mUVkYLtXvTx7MCvbUnzW2czyR8pql4XUlbcN9l1pSfPfOl0JV2bylyKoM4959sHQfr9Vpbk2V8u4ry0ndcvH5I1xggP9qVem/PHZL+qeGLrc945tLnHtG/LEtdjr4urxMpM92X1RZDd+pLtsorUydeCaiuvbtdSpQ9l2M4SU01nvI1e35L3uS5Jlw8pe1ykCKo2JtrGK9O9ujOlimcD6Y9LEWQ+7019d2VDLVPrTCLrsvjsQ1TfJVJM12pZmm5b4Xptx6HM9SpFkP2c6drJa5/iSr+pD7r+CNLvATVfpST1RYog/fwKTdsyxLVNQfnWrkyziGltJK2hLLptzjHXIsh+/HytmyQfpPA5VNtzXWWLzbiVsc9sbWSJ7UWE69KNh6v9kya2c6TzMa0fwpD37TtvQ6wuiw9CA9cny33Mj2pLte9Kp6996HO/83HPQ5r+ov5mvU9Qte/fIrGJP7axPO/9eXX6kjLPKZNd17iyZdOHLP31JSbfXY6hC59c+ZZ136TZ9SFlj6cvmVkSrkSQn3NG5KBqEVSeH6Ji/vvnhFWjSlfFNDwzyMgqLvvKxXffbeASBWo+Zj4p2x6TfwE=\",f={data:v};export{v as data,f as default};\n//# sourceMappingURL=typeTrie.json.mjs.map\n", "var d=\"AAACAAAAAACAOAAAAbYBSf7t2S1IBEEYBuDVDZ7FYrQMNsFiu3hgEYOI0SCXRIUrB8JhEZtgs5gEg1GMFk02m82oGI02m+9xezCOczv/uwv3fvAwc/PzfXOzcdqzWdaBDdiGPdiHdjE+DS3RNDuCfsn8idQ/g3OH3BdwKf0e96/gumTfYcncLdzBPTzAo+RZ+f0Cr/AG7/AJX4738x1wtz9FO5PX/50n6UXMNdfg/0lERERERERERERERETpdedHBvDRql4nq0cXtW9af98qdRby0Vvp8K4W0V+C5Xw0t4J2bfjeBp3cnEu1brnnCTYNa7eKdz91XP7WO9Lb4GqRb7cY6xbtAdqeVOsY/QGcevw/tb6OT85YhvfKYEx9CMuxKsKnrs+eJtVInVvHJ0eVYVvTZk2siFVLOCjb61PTZX3MdVWEyP7fjzpmMxdzTyq2Ebue6x61nXRGnzndWpf1an7dXmGYE4Y1ptqqKsK1nu26Ju0ty+maV2Rpvk+qnDZjKUIobUiesdAQE/jmCTmHmsskpFZsVYbtmXRcaoSGUPomunW2derQhDPFjtT1Q/eb8vnm990fq35oHVt11bU9m89c7DNI8Qs=\",A={data:d};export{d as data,A as default};\n//# sourceMappingURL=extPict.json.mjs.map\n", "var TINF_OK = 0;\nvar TINF_DATA_ERROR = -3;\n\nfunction Tree() {\n  this.table = new Uint16Array(16);   /* table of code length counts */\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\n}\n\nfunction Data(source, dest) {\n  this.source = source;\n  this.sourceIndex = 0;\n  this.tag = 0;\n  this.bitcount = 0;\n  \n  this.dest = dest;\n  this.destLen = 0;\n  \n  this.ltree = new Tree();  /* dynamic length/symbol tree */\n  this.dtree = new Tree();  /* dynamic distance tree */\n}\n\n/* --------------------------------------------------- *\n * -- uninitialized global data (static structures) -- *\n * --------------------------------------------------- */\n\nvar sltree = new Tree();\nvar sdtree = new Tree();\n\n/* extra bits and base tables for length codes */\nvar length_bits = new Uint8Array(30);\nvar length_base = new Uint16Array(30);\n\n/* extra bits and base tables for distance codes */\nvar dist_bits = new Uint8Array(30);\nvar dist_base = new Uint16Array(30);\n\n/* special ordering of code length codes */\nvar clcidx = new Uint8Array([\n  16, 17, 18, 0, 8, 7, 9, 6,\n  10, 5, 11, 4, 12, 3, 13, 2,\n  14, 1, 15\n]);\n\n/* used by tinf_decode_trees, avoids allocations every call */\nvar code_tree = new Tree();\nvar lengths = new Uint8Array(288 + 32);\n\n/* ----------------------- *\n * -- utility functions -- *\n * ----------------------- */\n\n/* build extra bits and base tables */\nfunction tinf_build_bits_base(bits, base, delta, first) {\n  var i, sum;\n\n  /* build bits table */\n  for (i = 0; i < delta; ++i) bits[i] = 0;\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n\n  /* build base table */\n  for (sum = first, i = 0; i < 30; ++i) {\n    base[i] = sum;\n    sum += 1 << bits[i];\n  }\n}\n\n/* build the fixed huffman trees */\nfunction tinf_build_fixed_trees(lt, dt) {\n  var i;\n\n  /* build fixed length tree */\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n  lt.table[7] = 24;\n  lt.table[8] = 152;\n  lt.table[9] = 112;\n\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n\n  /* build fixed distance tree */\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n  dt.table[5] = 32;\n\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\n}\n\n/* given an array of code lengths, build a tree */\nvar offs = new Uint16Array(16);\n\nfunction tinf_build_tree(t, lengths, off, num) {\n  var i, sum;\n\n  /* clear code length count table */\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\n\n  /* scan symbol lengths, and sum code length counts */\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n  t.table[0] = 0;\n\n  /* compute offset table for distribution sort */\n  for (sum = 0, i = 0; i < 16; ++i) {\n    offs[i] = sum;\n    sum += t.table[i];\n  }\n\n  /* create code->symbol translation table (symbols sorted by code) */\n  for (i = 0; i < num; ++i) {\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n  }\n}\n\n/* ---------------------- *\n * -- decode functions -- *\n * ---------------------- */\n\n/* get one bit from source stream */\nfunction tinf_getbit(d) {\n  /* check if tag is empty */\n  if (!d.bitcount--) {\n    /* load next tag */\n    d.tag = d.source[d.sourceIndex++];\n    d.bitcount = 7;\n  }\n\n  /* shift bit out of tag */\n  var bit = d.tag & 1;\n  d.tag >>>= 1;\n\n  return bit;\n}\n\n/* read a num bit value from a stream and add base */\nfunction tinf_read_bits(d, num, base) {\n  if (!num)\n    return base;\n\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n\n  var val = d.tag & (0xffff >>> (16 - num));\n  d.tag >>>= num;\n  d.bitcount -= num;\n  return val + base;\n}\n\n/* given a data stream and a tree, decode a symbol */\nfunction tinf_decode_symbol(d, t) {\n  while (d.bitcount < 24) {\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n    d.bitcount += 8;\n  }\n  \n  var sum = 0, cur = 0, len = 0;\n  var tag = d.tag;\n\n  /* get more bits while code value is above sum */\n  do {\n    cur = 2 * cur + (tag & 1);\n    tag >>>= 1;\n    ++len;\n\n    sum += t.table[len];\n    cur -= t.table[len];\n  } while (cur >= 0);\n  \n  d.tag = tag;\n  d.bitcount -= len;\n\n  return t.trans[sum + cur];\n}\n\n/* given a data stream, decode dynamic trees from it */\nfunction tinf_decode_trees(d, lt, dt) {\n  var hlit, hdist, hclen;\n  var i, num, length;\n\n  /* get 5 bits HLIT (257-286) */\n  hlit = tinf_read_bits(d, 5, 257);\n\n  /* get 5 bits HDIST (1-32) */\n  hdist = tinf_read_bits(d, 5, 1);\n\n  /* get 4 bits HCLEN (4-19) */\n  hclen = tinf_read_bits(d, 4, 4);\n\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\n\n  /* read code lengths for code length alphabet */\n  for (i = 0; i < hclen; ++i) {\n    /* get 3 bits code length (0-7) */\n    var clen = tinf_read_bits(d, 3, 0);\n    lengths[clcidx[i]] = clen;\n  }\n\n  /* build code length tree */\n  tinf_build_tree(code_tree, lengths, 0, 19);\n\n  /* decode code lengths for the dynamic trees */\n  for (num = 0; num < hlit + hdist;) {\n    var sym = tinf_decode_symbol(d, code_tree);\n\n    switch (sym) {\n      case 16:\n        /* copy previous code length 3-6 times (read 2 bits) */\n        var prev = lengths[num - 1];\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\n          lengths[num++] = prev;\n        }\n        break;\n      case 17:\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      case 18:\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\n          lengths[num++] = 0;\n        }\n        break;\n      default:\n        /* values 0-15 represent the actual code lengths */\n        lengths[num++] = sym;\n        break;\n    }\n  }\n\n  /* build dynamic trees */\n  tinf_build_tree(lt, lengths, 0, hlit);\n  tinf_build_tree(dt, lengths, hlit, hdist);\n}\n\n/* ----------------------------- *\n * -- block inflate functions -- *\n * ----------------------------- */\n\n/* given a stream and two trees, inflate a block of data */\nfunction tinf_inflate_block_data(d, lt, dt) {\n  while (1) {\n    var sym = tinf_decode_symbol(d, lt);\n\n    /* check for end of block */\n    if (sym === 256) {\n      return TINF_OK;\n    }\n\n    if (sym < 256) {\n      d.dest[d.destLen++] = sym;\n    } else {\n      var length, dist, offs;\n      var i;\n\n      sym -= 257;\n\n      /* possibly get more bits from length code */\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n\n      dist = tinf_decode_symbol(d, dt);\n\n      /* possibly get more bits from distance code */\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n\n      /* copy match */\n      for (i = offs; i < offs + length; ++i) {\n        d.dest[d.destLen++] = d.dest[i];\n      }\n    }\n  }\n}\n\n/* inflate an uncompressed block of data */\nfunction tinf_inflate_uncompressed_block(d) {\n  var length, invlength;\n  var i;\n  \n  /* unread from bitbuffer */\n  while (d.bitcount > 8) {\n    d.sourceIndex--;\n    d.bitcount -= 8;\n  }\n\n  /* get length */\n  length = d.source[d.sourceIndex + 1];\n  length = 256 * length + d.source[d.sourceIndex];\n\n  /* get one's complement of length */\n  invlength = d.source[d.sourceIndex + 3];\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n\n  /* check length */\n  if (length !== (~invlength & 0x0000ffff))\n    return TINF_DATA_ERROR;\n\n  d.sourceIndex += 4;\n\n  /* copy block */\n  for (i = length; i; --i)\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\n\n  /* make sure we start next block on a byte boundary */\n  d.bitcount = 0;\n\n  return TINF_OK;\n}\n\n/* inflate stream from source to dest */\nfunction tinf_uncompress(source, dest) {\n  var d = new Data(source, dest);\n  var bfinal, btype, res;\n\n  do {\n    /* read final block flag */\n    bfinal = tinf_getbit(d);\n\n    /* read block type (2 bits) */\n    btype = tinf_read_bits(d, 2, 0);\n\n    /* decompress block */\n    switch (btype) {\n      case 0:\n        /* decompress uncompressed block */\n        res = tinf_inflate_uncompressed_block(d);\n        break;\n      case 1:\n        /* decompress block with fixed huffman trees */\n        res = tinf_inflate_block_data(d, sltree, sdtree);\n        break;\n      case 2:\n        /* decompress block with dynamic huffman trees */\n        tinf_decode_trees(d, d.ltree, d.dtree);\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n        break;\n      default:\n        res = TINF_DATA_ERROR;\n    }\n\n    if (res !== TINF_OK)\n      throw new Error('Data error');\n\n  } while (!bfinal);\n\n  if (d.destLen < d.dest.length) {\n    if (typeof d.dest.slice === 'function')\n      return d.dest.slice(0, d.destLen);\n    else\n      return d.dest.subarray(0, d.destLen);\n  }\n  \n  return d.dest;\n}\n\n/* -------------------- *\n * -- initialization -- *\n * -------------------- */\n\n/* build fixed huffman trees */\ntinf_build_fixed_trees(sltree, sdtree);\n\n/* build extra bits and base tables */\ntinf_build_bits_base(length_bits, length_base, 4, 3);\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\n\n/* fix a special case */\nlength_bits[28] = 0;\nlength_base[28] = 258;\n\nmodule.exports = tinf_uncompress;\n", "const isBigEndian = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);\n\nconst swap = (b, n, m) => {\n  let i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n};\n\nconst swap32 = array => {\n  const len = array.length;\n  for (let i = 0; i < len; i += 4) {\n    swap(array, i, i + 3);\n    swap(array, i + 1, i + 2);\n  }\n};\n\nconst swap32LE = array => {\n  if (isBigEndian) {\n    swap32(array);\n  }\n};\n\nmodule.exports = {\n  swap32LE: swap32LE\n};\n", "const inflate = require('tiny-inflate');\nconst { swap32LE } = require('./swap');\n\n// Shift size for getting the index-1 table offset.\nconst SHIFT_1 = 6 + 5;\n\n// Shift size for getting the index-2 table offset.\nconst SHIFT_2 = 5;\n\n// Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\nconst SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n\n// Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\nconst OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;\n\n// Number of entries in an index-2 block. 64=0x40\nconst INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n\n// Mask for getting the lower bits for the in-index-2-block offset. */\nconst INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n\n// Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\nconst INDEX_SHIFT = 2;\n\n// Number of entries in a data block. 32=0x20\nconst DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n\n// Mask for getting the lower bits for the in-data-block offset.\nconst DATA_MASK = DATA_BLOCK_LENGTH - 1;\n\n// The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\nconst LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nconst LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;\n\n// Count the lengths of both BMP pieces. 2080=0x820\nconst INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n\n// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\nconst UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nconst UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8\n\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\nconst INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n\n// The alignment size of a data block. Also the granularity for compaction.\nconst DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nclass UnicodeTrie {\n  constructor(data) {\n    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      let uncompressedLength;\n      if (isBuffer) {\n        this.highStart = data.readUInt32LE(0);\n        this.errorValue = data.readUInt32LE(4);\n        uncompressedLength = data.readUInt32LE(8);\n        data = data.slice(12);\n      } else {\n        const view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0, true);\n        this.errorValue = view.getUint32(4, true);\n        uncompressedLength = view.getUint32(8, true);\n        data = data.subarray(12);\n      }\n\n      // double inflate the actual trie data\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n\n      // swap bytes from little-endian\n      swap32LE(data);\n\n      this.data = new Uint32Array(data.buffer);\n\n    } else {\n      // pre-parsed data\n      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n    }\n  }\n\n  get(codePoint) {\n    let index;\n    if ((codePoint < 0) || (codePoint > 0x10ffff)) {\n      return this.errorValue;\n    }\n\n    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {\n      // Ordinary BMP code point, excluding leading surrogates.\n      // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n      // data is stored in the index array itself.\n      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint <= 0xffff) {\n      // Lead Surrogate Code Point.  A Separate index section is stored for\n      // lead surrogate code units and code points.\n      //   The main index has the code unit data.\n      //   For this function, we need the code point data.\n      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    if (codePoint < this.highStart) {\n      // Supplemental code point, use two-level lookup.\n      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];\n      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];\n      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n      return this.data[index];\n    }\n\n    return this.data[this.data.length - DATA_GRANULARITY];\n  }\n}\n\nmodule.exports = UnicodeTrie;", "var e={exports:{}};export{e as __module};\n//# sourceMappingURL=base64.mjs.map\n", "//\n// THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT BY HAND!\n//\n;\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? module.exports = factory()\n        : typeof define === 'function' && define.amd\n            ? define(factory) :\n            // cf. https://github.com/dankogai/js-base64/issues/119\n            (function () {\n                // existing version for noConflict()\n                var _Base64 = global.Base64;\n                var gBase64 = factory();\n                gBase64.noConflict = function () {\n                    global.Base64 = _Base64;\n                    return gBase64;\n                };\n                if (global.Meteor) { // Meteor.js\n                    Base64 = gBase64;\n                }\n                global.Base64 = gBase64;\n            })();\n}((typeof self !== 'undefined' ? self\n    : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n            : this), function () {\n    'use strict';\n    /**\n     *  base64.ts\n     *\n     *  Licensed under the BSD 3-Clause License.\n     *    http://opensource.org/licenses/BSD-3-Clause\n     *\n     *  References:\n     *    http://en.wikipedia.org/wiki/Base64\n     *\n     * @author Dan Kogai (https://github.com/dankogai)\n     */\n    var version = '3.7.5';\n    /**\n     * @deprecated use lowercase `version`.\n     */\n    var VERSION = version;\n    var _hasatob = typeof atob === 'function';\n    var _hasbtoa = typeof btoa === 'function';\n    var _hasBuffer = typeof Buffer === 'function';\n    var _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\n    var _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\n    var b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var b64chs = Array.prototype.slice.call(b64ch);\n    var b64tab = (function (a) {\n        var tab = {};\n        a.forEach(function (c, i) { return tab[c] = i; });\n        return tab;\n    })(b64chs);\n    var b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n    var _fromCC = String.fromCharCode.bind(String);\n    var _U8Afrom = typeof Uint8Array.from === 'function'\n        ? Uint8Array.from.bind(Uint8Array)\n        : function (it) { return new Uint8Array(Array.prototype.slice.call(it, 0)); };\n    var _mkUriSafe = function (src) { return src\n        .replace(/=/g, '').replace(/[+\\/]/g, function (m0) { return m0 == '+' ? '-' : '_'; }); };\n    var _tidyB64 = function (s) { return s.replace(/[^A-Za-z0-9\\+\\/]/g, ''); };\n    /**\n     * polyfill version of `btoa`\n     */\n    var btoaPolyfill = function (bin) {\n        // console.log('polyfilled');\n        var u32, c0, c1, c2, asc = '';\n        var pad = bin.length % 3;\n        for (var i = 0; i < bin.length;) {\n            if ((c0 = bin.charCodeAt(i++)) > 255 ||\n                (c1 = bin.charCodeAt(i++)) > 255 ||\n                (c2 = bin.charCodeAt(i++)) > 255)\n                throw new TypeError('invalid character found');\n            u32 = (c0 << 16) | (c1 << 8) | c2;\n            asc += b64chs[u32 >> 18 & 63]\n                + b64chs[u32 >> 12 & 63]\n                + b64chs[u32 >> 6 & 63]\n                + b64chs[u32 & 63];\n        }\n        return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n    };\n    /**\n     * does what `window.btoa` of web browsers do.\n     * @param {String} bin binary string\n     * @returns {string} Base64-encoded string\n     */\n    var _btoa = _hasbtoa ? function (bin) { return btoa(bin); }\n        : _hasBuffer ? function (bin) { return Buffer.from(bin, 'binary').toString('base64'); }\n            : btoaPolyfill;\n    var _fromUint8Array = _hasBuffer\n        ? function (u8a) { return Buffer.from(u8a).toString('base64'); }\n        : function (u8a) {\n            // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n            var maxargs = 0x1000;\n            var strs = [];\n            for (var i = 0, l = u8a.length; i < l; i += maxargs) {\n                strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n            }\n            return _btoa(strs.join(''));\n        };\n    /**\n     * converts a Uint8Array to a Base64 string.\n     * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n     * @returns {string} Base64 string\n     */\n    var fromUint8Array = function (u8a, urlsafe) {\n        if (urlsafe === void 0) { urlsafe = false; }\n        return urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n    };\n    // This trick is found broken https://github.com/dankogai/js-base64/issues/130\n    // const utob = (src: string) => unescape(encodeURIComponent(src));\n    // reverting good old fationed regexp\n    var cb_utob = function (c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                    + _fromCC(0x80 | (cc & 0x3f)))\n                    : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                        + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                        + _fromCC(0x80 | (cc & 0x3f)));\n        }\n        else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n                + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n                + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                + _fromCC(0x80 | (cc & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    /**\n     * @deprecated should have been internal use only.\n     * @param {string} src UTF-8 string\n     * @returns {string} UTF-16 string\n     */\n    var utob = function (u) { return u.replace(re_utob, cb_utob); };\n    //\n    var _encode = _hasBuffer\n        ? function (s) { return Buffer.from(s, 'utf8').toString('base64'); }\n        : _TE\n            ? function (s) { return _fromUint8Array(_TE.encode(s)); }\n            : function (s) { return _btoa(utob(s)); };\n    /**\n     * converts a UTF-8-encoded string to a Base64 string.\n     * @param {boolean} [urlsafe] if `true` make the result URL-safe\n     * @returns {string} Base64 string\n     */\n    var encode = function (src, urlsafe) {\n        if (urlsafe === void 0) { urlsafe = false; }\n        return urlsafe\n            ? _mkUriSafe(_encode(src))\n            : _encode(src);\n    };\n    /**\n     * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n     * @returns {string} Base64 string\n     */\n    var encodeURI = function (src) { return encode(src, true); };\n    // This trick is found broken https://github.com/dankogai/js-base64/issues/130\n    // const btou = (src: string) => decodeURIComponent(escape(src));\n    // reverting good old fationed regexp\n    var re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\n    var cb_btou = function (cccc) {\n        switch (cccc.length) {\n            case 4:\n                var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                    | ((0x3f & cccc.charCodeAt(1)) << 12)\n                    | ((0x3f & cccc.charCodeAt(2)) << 6)\n                    | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n                return (_fromCC((offset >>> 10) + 0xD800)\n                    + _fromCC((offset & 0x3FF) + 0xDC00));\n            case 3:\n                return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    | (0x3f & cccc.charCodeAt(2)));\n            default:\n                return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                    | (0x3f & cccc.charCodeAt(1)));\n        }\n    };\n    /**\n     * @deprecated should have been internal use only.\n     * @param {string} src UTF-16 string\n     * @returns {string} UTF-8 string\n     */\n    var btou = function (b) { return b.replace(re_btou, cb_btou); };\n    /**\n     * polyfill version of `atob`\n     */\n    var atobPolyfill = function (asc) {\n        // console.log('polyfilled');\n        asc = asc.replace(/\\s+/g, '');\n        if (!b64re.test(asc))\n            throw new TypeError('malformed base64.');\n        asc += '=='.slice(2 - (asc.length & 3));\n        var u24, bin = '', r1, r2;\n        for (var i = 0; i < asc.length;) {\n            u24 = b64tab[asc.charAt(i++)] << 18\n                | b64tab[asc.charAt(i++)] << 12\n                | (r1 = b64tab[asc.charAt(i++)]) << 6\n                | (r2 = b64tab[asc.charAt(i++)]);\n            bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n                : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                    : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n        }\n        return bin;\n    };\n    /**\n     * does what `window.atob` of web browsers do.\n     * @param {String} asc Base64-encoded string\n     * @returns {string} binary string\n     */\n    var _atob = _hasatob ? function (asc) { return atob(_tidyB64(asc)); }\n        : _hasBuffer ? function (asc) { return Buffer.from(asc, 'base64').toString('binary'); }\n            : atobPolyfill;\n    //\n    var _toUint8Array = _hasBuffer\n        ? function (a) { return _U8Afrom(Buffer.from(a, 'base64')); }\n        : function (a) { return _U8Afrom(_atob(a).split('').map(function (c) { return c.charCodeAt(0); })); };\n    /**\n     * converts a Base64 string to a Uint8Array.\n     */\n    var toUint8Array = function (a) { return _toUint8Array(_unURI(a)); };\n    //\n    var _decode = _hasBuffer\n        ? function (a) { return Buffer.from(a, 'base64').toString('utf8'); }\n        : _TD\n            ? function (a) { return _TD.decode(_toUint8Array(a)); }\n            : function (a) { return btou(_atob(a)); };\n    var _unURI = function (a) { return _tidyB64(a.replace(/[-_]/g, function (m0) { return m0 == '-' ? '+' : '/'; })); };\n    /**\n     * converts a Base64 string to a UTF-8 string.\n     * @param {String} src Base64 string.  Both normal and URL-safe are supported\n     * @returns {string} UTF-8 string\n     */\n    var decode = function (src) { return _decode(_unURI(src)); };\n    /**\n     * check if a value is a valid Base64 string\n     * @param {String} src a value to check\n      */\n    var isValid = function (src) {\n        if (typeof src !== 'string')\n            return false;\n        var s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n        return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n    };\n    //\n    var _noEnum = function (v) {\n        return {\n            value: v, enumerable: false, writable: true, configurable: true\n        };\n    };\n    /**\n     * extend String.prototype with relevant methods\n     */\n    var extendString = function () {\n        var _add = function (name, body) { return Object.defineProperty(String.prototype, name, _noEnum(body)); };\n        _add('fromBase64', function () { return decode(this); });\n        _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n        _add('toBase64URI', function () { return encode(this, true); });\n        _add('toBase64URL', function () { return encode(this, true); });\n        _add('toUint8Array', function () { return toUint8Array(this); });\n    };\n    /**\n     * extend Uint8Array.prototype with relevant methods\n     */\n    var extendUint8Array = function () {\n        var _add = function (name, body) { return Object.defineProperty(Uint8Array.prototype, name, _noEnum(body)); };\n        _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n        _add('toBase64URI', function () { return fromUint8Array(this, true); });\n        _add('toBase64URL', function () { return fromUint8Array(this, true); });\n    };\n    /**\n     * extend Builtin prototypes with relevant methods\n     */\n    var extendBuiltins = function () {\n        extendString();\n        extendUint8Array();\n    };\n    var gBase64 = {\n        version: version,\n        VERSION: VERSION,\n        atob: _atob,\n        atobPolyfill: atobPolyfill,\n        btoa: _btoa,\n        btoaPolyfill: btoaPolyfill,\n        fromBase64: decode,\n        toBase64: encode,\n        encode: encode,\n        encodeURI: encodeURI,\n        encodeURL: encodeURI,\n        utob: utob,\n        btou: btou,\n        decode: decode,\n        isValid: isValid,\n        fromUint8Array: fromUint8Array,\n        toUint8Array: toUint8Array,\n        extendString: extendString,\n        extendUint8Array: extendUint8Array,\n        extendBuiltins: extendBuiltins\n    };\n    //\n    // export Base64 to the namespace\n    //\n    // ES5 is yet to have Object.assign() that may make transpilers unhappy.\n    // gBase64.Base64 = Object.assign({}, gBase64);\n    gBase64.Base64 = {};\n    Object.keys(gBase64).forEach(function (k) { return gBase64.Base64[k] = gBase64[k]; });\n    return gBase64;\n}));\n", "module.exports = {\n  Other: 0,\n  CR: 1 << 0,\n  LF: 1 << 1,\n  Control: 1 << 2,\n  Extend: 1 << 3,\n  ZWJ: 1 << 4,\n  Regional_Indicator: 1 << 5,\n  Prepend: 1 << 6,\n  SpacingMark: 1 << 7,\n  L: 1 << 8,\n  V: 1 << 9,\n  T: 1 << 10,\n  LV: 1 << 11,\n  LVT: 1 << 12,\n  Extended_Pictographic: 1 << 13,\n};\n", "const types = require(\"./types\");\nconst typeTrieData = require(\"./typeTrie.json\").data;\nconst extPictData = require(\"./extPict.json\").data;\n\nconst UnicodeTrie = require(\"unicode-trie\");\nconst Base64 = require(\"js-base64\").Base64;\n\nconst typeTrie = new UnicodeTrie(Base64.toUint8Array(typeTrieData));\nconst extPict = new UnicodeTrie(Base64.toUint8Array(extPictData));\n\nfunction is(type, bit) {\n  return (type & bit) !== 0;\n}\n\nconst GB11State = {\n  Initial: 0,\n  ExtendOrZWJ: 1,\n  NotBoundary: 2,\n};\n\nfunction nextGraphemeClusterSize(ts, start) {\n  const L = ts.length;\n\n  let ri = 0;\n  let gb11State = GB11State.Initial;\n\n  // GB1: sot ÷ Any\n  for (let i = start; i + 1 < L; i++) {\n    const curr = ts[i + 0];\n    const next = ts[i + 1];\n\n    // for GB12, GB13\n    if (!is(curr, types.Regional_Indicator)) {\n      ri = 0;\n    }\n\n    // for GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\n    switch (gb11State) {\n      case GB11State.NotBoundary:\n      case GB11State.Initial:\n        if (is(curr, types.Extended_Pictographic)) {\n          gb11State = GB11State.ExtendOrZWJ;\n        } else {\n          gb11State = GB11State.Initial;\n        }\n        break;\n      case GB11State.ExtendOrZWJ:\n        if (is(curr, types.Extend)) {\n          gb11State = GB11State.ExtendOrZWJ;\n        } else if (\n          is(curr, types.ZWJ) &&\n          is(next, types.Extended_Pictographic)\n        ) {\n          gb11State = GB11State.NotBoundary;\n        } else {\n          gb11State = GB11State.Initial;\n        }\n        break;\n    }\n\n    // GB3: CR x LF\n    if (is(curr, types.CR) && is(next, types.LF)) {\n      continue;\n    }\n    // GB4: (Control | CR | LF) ÷\n    if (is(curr, types.Control | types.CR | types.LF)) {\n      return i + 1 - start;\n    }\n    // GB5: ÷ (Control | CR | LF)\n    if (is(next, types.Control | types.CR | types.LF)) {\n      return i + 1 - start;\n    }\n    // GB6: L x (L | V | LV | LVT)\n    if (\n      is(curr, types.L) &&\n      is(next, types.L | types.V | types.LV | types.LVT)\n    ) {\n      continue;\n    }\n    // GB7: (LV | V) x (V | T)\n    if (is(curr, types.LV | types.V) && is(next, types.V | types.T)) {\n      continue;\n    }\n    // GB8: (LVT | T) x T\n    if (is(curr, types.LVT | types.T) && is(next, types.T)) {\n      continue;\n    }\n    // GB9: x (Extend | ZWJ)\n    if (is(next, types.Extend | types.ZWJ)) {\n      continue;\n    }\n    // GB9a: x SpacingMark\n    if (is(next, types.SpacingMark)) {\n      continue;\n    }\n    // GB9b: Prepend x\n    if (is(curr, types.Prepend)) {\n      continue;\n    }\n    // GB11: \\p{Extended_Pictographic} Extend* ZWJ x \\p{Extended_Pictographic}\n    if (gb11State === GB11State.NotBoundary) {\n      continue;\n    }\n    // GB12: sot (RI RI)* RI x RI\n    // GB13: [^RI] (RI RI)* RI x RI\n    if (\n      is(curr, types.Regional_Indicator) &&\n      is(next, types.Regional_Indicator) &&\n      ri % 2 === 0\n    ) {\n      ri++;\n      continue;\n    }\n    // GB999: Any ÷ Any\n    return i + 1 - start;\n  }\n  // GB2: Any ÷ eot\n  return L - start;\n}\n\nmodule.exports = function split(str) {\n  const graphemeClusters = [];\n\n  const map = [0];\n  const ts = [];\n  for (let i = 0; i < str.length; ) {\n    const code = str.codePointAt(i);\n    ts.push(typeTrie.get(code) | extPict.get(code));\n    i += code > 65535 ? 2 : 1;\n    map.push(i);\n  }\n\n  for (let offset = 0; offset < ts.length; ) {\n    const size = nextGraphemeClusterSize(ts, offset);\n    const start = map[offset];\n    const end = map[offset + size];\n    graphemeClusters.push(str.slice(start, end));\n    offset += size;\n  }\n\n  return graphemeClusters;\n};\n", null, null, null, null, null, null, null, null, null, "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
  "mappings": "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",
  "names": ["r", "base64Js", "byteLength", "b64", "lens", "getLens", "validLen", "placeHoldersLen", "toByteArray", "tmp", "i", "arr", "Arr", "curByte", "len", "revLookup", "charCodeAt", "fromByteArray", "uint8", "length", "extraBytes", "parts", "maxChunkLength", "len2", "push", "encodeChunk", "lookup", "join", "Uint8Array", "Array", "code", "Error", "indexOf", "start", "end", "num", "output", "r", "ieee754", "read", "buffer", "offset", "isLE", "mLen", "nBytes", "e", "m", "eLen", "eMax", "eBias", "nBits", "i", "d", "s", "NaN", "Infinity", "Math", "pow", "write", "value", "c", "rt", "abs", "isNaN", "floor", "log", "LN2", "base64", "require$$0", "ieee754", "require$$1", "customInspectSymbol", "Symbol", "exports", "Buffer", "SlowBuffer", "length", "alloc", "INSPECT_MAX_BYTES", "K_MAX_LENGTH", "createBuffer", "RangeError", "buf", "Uint8Array", "Object", "setPrototypeOf", "prototype", "arg", "encodingOrOffset", "TypeError", "allocUnsafe", "from", "value", "string", "encoding", "isEncoding", "byteLength", "actual", "write", "slice", "ArrayBuffer", "isView", "arrayView", "isInstance", "copy", "fromArrayBuffer", "buffer", "byteOffset", "fromArrayLike", "SharedArrayBuffer", "valueOf", "b", "obj", "isBuffer", "len", "checked", "numberIsNaN", "type", "Array", "isArray", "data", "toPrimitive", "assertSize", "size", "array", "i", "toString", "mustMatch", "arguments", "loweredCase", "utf8ToBytes", "base64ToBytes", "toLowerCase", "slowToString", "start", "end", "this", "hexSlice", "utf8Slice", "asciiSlice", "latin1Slice", "base64Slice", "utf16leSlice", "swap", "n", "m", "bidirectionalIndexOf", "val", "dir", "arrayIndexOf", "indexOf", "call", "lastIndexOf", "arr", "indexSize", "arrLength", "valLength", "String", "read", "readUInt16BE", "foundIndex", "found", "j", "hexWrite", "offset", "Number", "remaining", "strLen", "parsed", "parseInt", "substr", "utf8Write", "blitBuffer", "asciiWrite", "str", "byteArray", "push", "charCodeAt", "base64Write", "ucs2Write", "units", "c", "hi", "lo", "fromByteArray", "Math", "min", "res", "firstByte", "codePoint", "bytesPerSequence", "secondByte", "thirdByte", "fourthByte", "tempCodePoint", "codePoints", "MAX_ARGUMENTS_LENGTH", "fromCharCode", "apply", "kMaxLength", "TYPED_ARRAY_SUPPORT", "proto", "foo", "e", "typedArraySupport", "console", "error", "defineProperty", "enumerable", "get", "poolSize", "fill", "allocUnsafeSlow", "_isBuffer", "compare", "a", "x", "y", "concat", "list", "pos", "set", "swap16", "swap32", "swap64", "toLocaleString", "equals", "inspect", "max", "replace", "trim", "target", "thisStart", "thisEnd", "thisCopy", "targetCopy", "includes", "isFinite", "Error", "toJSON", "_arr", "ret", "out", "hexSliceLookupTable", "bytes", "checkOffset", "ext", "checkInt", "wrtBigUInt64LE", "checkIntBI", "BigInt", "wrtBigUInt64BE", "checkIEEE754", "writeFloat", "littleEndian", "noAssert", "writeDouble", "newBuf", "subarray", "readUintLE", "readUIntLE", "mul", "readUintBE", "readUIntBE", "readUint8", "readUInt8", "readUint16LE", "readUInt16LE", "readUint16BE", "readUint32LE", "readUInt32LE", "readUint32BE", "readUInt32BE", "readBigUInt64LE", "defineBigIntMethod", "validateNumber", "first", "last", "boundsError", "readBigUInt64BE", "readIntLE", "pow", "readIntBE", "readInt8", "readInt16LE", "readInt16BE", "readInt32LE", "readInt32BE", "readBigInt64LE", "readBigInt64BE", "readFloatLE", "readFloatBE", "readDoubleLE", "readDoubleBE", "writeUintLE", "writeUIntLE", "writeUintBE", "writeUIntBE", "writeUint8", "writeUInt8", "writeUint16LE", "writeUInt16LE", "writeUint16BE", "writeUInt16BE", "writeUint32LE", "writeUInt32LE", "writeUint32BE", "writeUInt32BE", "writeBigUInt64LE", "writeBigUInt64BE", "writeIntLE", "limit", "sub", "writeIntBE", "writeInt8", "writeInt16LE", "writeInt16BE", "writeInt32LE", "writeInt32BE", "writeBigInt64LE", "writeBigInt64BE", "writeFloatLE", "writeFloatBE", "writeDoubleLE", "writeDoubleBE", "targetStart", "copyWithin", "code", "errors", "E", "sym", "getMessage", "Base", "constructor", "super", "writable", "configurable", "name", "message", "addNumericalSeparator", "range", "ERR_OUT_OF_RANGE", "ERR_INVALID_ARG_TYPE", "floor", "ERR_BUFFER_OUT_OF_BOUNDS", "input", "msg", "received", "isInteger", "abs", "INVALID_BASE64_RE", "Infinity", "leadSurrogate", "toByteArray", "split", "src", "dst", "alphabet", "table", "i16", "fn", "BufferBigIntNotDefined", "integers", "EncodeBuffer", "this", "offset", "buffer_size", "buffer", "ArrayBuffer", "view", "DataView", "prototype", "resize_if_necessary", "needed_space", "Math", "max", "new_buffer", "Uint8Array", "set", "get_used_buffer", "slice", "store_value", "value", "type", "bSize", "substring", "size", "parseInt", "toCall", "concat", "store_bytes", "from", "length", "DecodeBuffer", "buf", "assert_enough_buffer", "byteLength", "Error", "consume_value", "ret", "consume_bytes", "extendStatics", "__extends", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "TypeError", "String", "__", "this", "constructor", "create", "isArrayLike", "value", "isArray", "length", "expect_type", "type", "fieldPath", "Error", "concat", "join", "expect_bigint", "includes", "expect_same_size", "expected", "expect_enum", "VALID_STRING_TYPES", "integers", "VALID_OBJECT_KEYS", "ErrorSchema", "_super", "schema", "message", "JSON", "stringify", "validate_schema", "keys", "key", "_i", "schema_1", "sch", "struct", "len", "BorshSerializer", "checkTypes", "this", "encoded", "EncodeBuffer", "fieldPath", "prototype", "encode", "value", "schema", "encode_value", "get_used_buffer", "integers", "includes", "encode_integer", "encode_string", "encode_boolean", "encode_option", "encode_enum", "encode_array", "encode_set", "encode_map", "encode_struct", "size", "parseInt", "substring", "utils", "store_value", "encode_bigint", "BigInt", "buffer_len", "buffer", "Uint8Array", "i", "Number", "store_bytes", "_value", "utf8Bytes", "length", "charCode", "charCodeAt", "push", "option", "valueKey", "Object", "keys", "valueSchema", "struct", "Error", "concat", "JSON", "stringify", "join", "encode_arraylike", "ArrayBuffer", "encode_buffer", "array", "len", "type", "byteLength", "values", "Set", "Array", "from", "_i", "values_1", "value_1", "set", "isMap", "Map", "keys_1", "key", "map", "get", "_a", "pop", "BorshDeserializer", "bufferArray", "this", "buffer", "DecodeBuffer", "prototype", "decode", "schema", "decode_value", "integers", "includes", "decode_integer", "decode_string", "decode_boolean", "decode_option", "decode_enum", "decode_array", "decode_set", "decode_map", "decode_struct", "Error", "concat", "size", "parseInt", "substring", "consume_value", "decode_bigint", "startsWith", "signed", "buffer_len", "Uint8Array", "consume_bytes", "bits", "reduceRight", "r", "x", "toString", "padStart", "BigInt", "asIntN", "len", "codePoints", "i", "byte", "push", "codePoint", "String", "fromCodePoint", "apply", "option", "_a", "valueIndex", "length", "struct", "key", "Object", "keys", "result", "array", "type", "Set", "add", "set", "Map", "map", "value", "serialize", "schema", "value", "validate", "utils", "BorshSerializer", "encode", "deserialize", "buffer", "BorshDeserializer", "decode", "burnInstruction", "constructor", "this", "tag", "serialize", "schema", "programId", "nameServiceId", "systemProgram", "domain", "reverse", "resellingState", "state", "centralState", "owner", "target", "data", "Buffer", "from", "keys", "push", "pubkey", "isSigner", "isWritable", "TransactionInstruction", "struct", "NAME_PROGRAM_ID", "PublicKey", "HASH_PREFIX", "ROOT_DOMAIN_ACCOUNT", "REGISTER_PROGRAM_ID", "REVERSE_LOOKUP_CLASS", "CENTRAL_STATE", "TWITTER_VERIFICATION_AUTHORITY", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "USDC_MINT", "REFERRERS", "TOKENS_SYM_MINT", "Map", "PYTH_FEEDS", "price", "product", "PYTH_MAPPING_ACC", "VAULT_OWNER_DEPRECATED", "VAULT_OWNER", "CUSTOM_BG_TLD", "WOLVES_COLLECTION_METADATA", "METAPLEX_ID", "DEFAULT_PYTH_PUSH_PROGRAM", "PYTH_PULL_FEEDS", "n", "o", "e", "t", "r", "i", "a", "u", "c", "h", "f", "p", "y", "s", "v", "m", "d", "w", "S", "E", "z", "P", "B", "R", "x", "Record", "RECORD_V1_SIZE", "Map", "SOL", "ETH", "BSC", "Injective", "A", "AAAA", "Background", "RecordVersion", "ErrorType", "SNSError", "Error", "type", "message", "super", "this", "name", "captureStackTrace", "SymbolNotFoundError", "SymbolNotFound", "InvalidSubdomainError", "InvalidSubdomain", "FavouriteDomainNotFoundError", "FavouriteDomainNotFound", "MissingParentOwnerError", "MissingParentOwner", "U32OverflowError", "U32Overflow", "InvalidBufferLengthError", "InvalidBufferLength", "U64OverflowError", "U64Overflow", "NoRecordDataError", "NoRecordData", "InvalidRecordDataError", "InvalidRecordData", "UnsupportedRecordError", "UnsupportedRecord", "InvalidEvmAddressError", "InvalidEvmAddress", "InvalidInjectiveAddressError", "InvalidInjectiveAddress", "InvalidARecordError", "InvalidARecord", "InvalidAAAARecordError", "InvalidAAAARecord", "InvalidRecordInputError", "InvalidRecordInput", "InvalidSignatureError", "InvalidSignature", "AccountDoesNotExistError", "AccountDoesNotExist", "MultipleRegistriesError", "MultipleRegistries", "InvalidReverseTwitterError", "InvalidReverseTwitter", "NoAccountDataError", "NoAccountData", "InvalidInputError", "InvalidInput", "InvalidDomainError", "InvalidDomain", "InvalidCustomBgError", "InvalidCustomBg", "UnsupportedSignatureError", "UnsupportedSignature", "RecordDoestNotSupportGuardianSigError", "RecordDoestNotSupportGuardianSig", "RecordIsNotSignedError", "RecordIsNotSigned", "UnsupportedSignatureTypeError", "UnsupportedSignatureType", "InvalidSolRecordV2Error", "InvalidSolRecordV2", "MissingVerifierError", "MissingVerifier", "PythFeedNotFoundError", "PythFeedNotFound", "InvalidRoAError", "InvalidRoA", "InvalidPdaError", "InvalidPda", "InvalidParrentError", "InvalidParrent", "NftRecordNotFoundError", "NftRecordNotFound", "PdaOwnerNotAllowed", "DomainDoesNotExist", "RecordMalformed", "CouldNotFindNftOwner", "WrongValidation", "isBytes", "a", "Uint8Array", "constructor", "name", "bytes", "b", "lengths", "Error", "length", "includes", "exists", "instance", "checkFinished", "destroyed", "finished", "output", "out", "min", "outputLen", "crypto", "globalThis", "createView", "arr", "DataView", "buffer", "byteOffset", "byteLength", "rotr", "word", "shift", "utf8ToBytes", "str", "Error", "Uint8Array", "TextEncoder", "encode", "toBytes", "data", "abytes", "Hash", "clone", "this", "_cloneInto", "wrapConstructor", "hashCons", "hashC", "msg", "update", "digest", "tmp", "outputLen", "blockLen", "create", "randomBytes", "bytesLength", "crypto", "getRandomValues", "Chi", "a", "b", "c", "Maj", "HashMD", "Hash", "constructor", "blockLen", "outputLen", "padOffset", "isLE", "super", "this", "finished", "length", "pos", "destroyed", "buffer", "Uint8Array", "view", "createView", "update", "data", "exists", "len", "toBytes", "take", "Math", "min", "set", "subarray", "process", "dataView", "roundClean", "digestInto", "out", "output", "fill", "i", "byteOffset", "value", "setBigUint64", "_32n", "BigInt", "_u32_max", "wh", "Number", "wl", "h", "l", "setUint32", "oview", "Error", "outLen", "state", "get", "digest", "res", "slice", "destroy", "_cloneInto", "to", "SHA256_K", "Uint32Array", "SHA256_IV", "SHA256_W", "SHA256", "HashMD", "constructor", "super", "this", "A", "B", "C", "D", "E", "F", "G", "H", "get", "set", "process", "view", "offset", "i", "getUint32", "W15", "W2", "s0", "rotr", "s1", "T1", "Chi", "T2", "Maj", "roundClean", "fill", "destroy", "buffer", "sha256", "wrapConstructor", "getHashedNameSync", "name", "input", "HASH_PREFIX", "hashed", "sha256", "Buffer", "from", "getNameAccountKeySync", "hashed_name", "nameClass", "nameParent", "seeds", "push", "toBuffer", "Buffer", "alloc", "nameAccountKey", "PublicKey", "findProgramAddressSync", "NAME_PROGRAM_ID", "_deriveSync", "name", "parent", "ROOT_DOMAIN_ACCOUNT", "classKey", "hashed", "getHashedNameSync", "pubkey", "getNameAccountKeySync", "getDomainKeySync", "domain", "record", "endsWith", "slice", "recordClass", "RecordVersion", "V2", "CENTRAL_STATE_SNS_RECORDS", "splitted", "split", "length", "sub", "Buffer", "from", "toString", "concat", "parentKey", "isSub", "subKey", "recordPrefix", "isSubRecord", "InvalidInputError", "undefined", "getReverseKeySync", "domain", "isSub", "pubkey", "parent", "getDomainKeySync", "hashedReverseLookup", "getHashedNameSync", "toBase58", "getNameAccountKeySync", "REVERSE_LOOKUP_CLASS", "undefined", "burnDomain", "domain", "owner", "target", "pubkey", "getDomainKeySync", "state", "PublicKey", "findProgramAddressSync", "toBuffer", "REGISTER_PROGRAM_ID", "resellingState", "Uint8Array", "from", "burnInstruction", "getInstruction", "NAME_PROGRAM_ID", "SystemProgram", "programId", "getReverseKeySync", "REVERSE_LOOKUP_CLASS", "Numberu32", "value", "this", "BigInt", "toBuffer", "a", "Buffer", "alloc", "writeUInt32LE", "Number", "buffer", "length", "InvalidBufferLengthError", "readUInt32LE", "toNumber", "toString", "String", "Numberu64", "writeBigUInt64LE", "U64OverflowError", "readBigUInt64LE", "createInstruction", "nameProgramId", "systemProgramId", "nameKey", "nameOwnerKey", "payerKey", "hashed_name", "lamports", "space", "nameClassKey", "nameParent", "nameParentOwner", "buffers", "Buffer", "from", "Int8Array", "Numberu32", "length", "toBuffer", "data", "concat", "keys", "pubkey", "isSigner", "isWritable", "push", "PublicKey", "alloc", "TransactionInstruction", "programId", "NAME_TOKENIZER_ID", "PublicKey", "MINT_PREFIX", "Buffer", "from", "getDomainMint", "domain", "mint", "PublicKey", "findProgramAddressSync", "MINT_PREFIX", "toBuffer", "NAME_TOKENIZER_ID", "bigInt", "P", "BigNumber", "v", "b", "c", "e", "i", "x", "p", "n", "s", "a", "k", "j", "d", "r", "y", "m", "compare", "q", "p2", "t", "format", "g2", "d2", "z", "l", "import_buffer_layout", "bool", "import_buffer_layout", "publicKey", "AccountState", "AccountLayout", "struct", "publicKey", "u64", "u32", "u8", "r", "l", "retrieveNftOwnerV2", "async", "connection", "nameAccount", "mint", "getDomainMint", "largestAccounts", "getTokenLargestAccounts", "value", "length", "largestAccountInfo", "getAccountInfo", "address", "decoded", "AccountLayout", "decode", "data", "amount", "toString", "owner", "err", "SolanaJSONRPCError", "code", "NameRegistryState", "obj", "this", "parentName", "PublicKey", "owner", "class", "data", "res", "deserialize", "schema", "slice", "HEADER_LEN", "connection", "nameAccountKey", "nameAccount", "getAccountInfo", "AccountDoesNotExistError", "_a", "registry", "nftOwner", "retrieveNftOwnerV2", "nameAccountKeys", "nameAccounts", "getMultipleAccountsInfo", "fn", "map", "e", "result", "keys", "length", "push", "_retrieveBatch", "splice", "struct", "array", "type", "len", "async", "getNameOwner", "connection", "nameAccountKey", "getAccountInfo", "AccountDoesNotExistError", "NameRegistryState", "retrieve", "getHashedName", "name", "input", "HASH_PREFIX", "hashed", "sha256", "Buffer", "from", "getNameAccountKey", "hashed_name", "nameClass", "nameParent", "seeds", "push", "toBuffer", "alloc", "PublicKey", "findProgramAddress", "NAME_PROGRAM_ID", "performReverseLookup", "nameAccount", "hashedReverseLookup", "toBase58", "reverseLookupAccount", "REVERSE_LOOKUP_CLASS", "registry", "data", "NoAccountDataError", "nameLength", "slice", "readUInt32LE", "toString", "performReverseLookupBatch", "nameAccounts", "reverseLookupAccounts", "retrieveBatch", "map", "_derive", "parent", "ROOT_DOMAIN_ACCOUNT", "pubkey", "getDomainKey", "domain", "record", "endsWith", "splitted", "split", "length", "sub", "concat", "parentKey", "isSub", "subKey", "recordPrefix", "isSubRecord", "InvalidInputError", "undefined", "getReverseKey", "async", "createNameRegistry", "connection", "name", "space", "payerKey", "nameOwner", "lamports", "nameClass", "parentName", "hashed_name", "getHashedNameSync", "nameAccountKey", "getNameAccountKeySync", "balance", "getMinimumBalanceForRentExemption", "nameParentOwner", "registry", "parentAccount", "getNameOwner", "owner", "createInstruction", "NAME_PROGRAM_ID", "SystemProgram", "programId", "Numberu64", "Numberu32", "check", "bool", "error", "chain", "args", "id", "a", "wrap", "b", "c", "encode", "map", "x", "reduceRight", "decode", "reduce", "gcd", "radix2carry", "from", "to", "convertRadix2", "data", "padding", "Array", "isArray", "Error", "carry", "pos", "mask", "res", "n", "push", "radix2", "bits", "revPadding", "bytes", "Uint8Array", "constructor", "name", "digits", "length", "unsafeWrapper", "fn", "apply", "e", "BECH_ALPHABET", "alphabet", "i", "input", "letter", "index", "indexOf", "separator", "join", "split", "POLYMOD_GENERATORS", "bech32Polymod", "pre", "chk", "bechChecksum", "prefix", "words", "encodingConst", "len", "charCodeAt", "v", "genBech32", "encoding", "ENCODING_CONST", "_words", "fromWords", "toWords", "fromWordsUnsafe", "str", "limit", "TypeError", "lowered", "toLowerCase", "toUpperCase", "sepIndex", "lastIndexOf", "slice", "sum", "endsWith", "actualLength", "decodeToBytes", "decodeUnsafe", "bech32", "maxInt", "base", "errors", "overflow", "floor", "Math", "stringFromCharCode", "String", "fromCharCode", "error", "type", "RangeError", "ucs2decode", "string", "output", "counter", "length", "value", "charCodeAt", "extra", "push", "digitToBasic", "digit", "flag", "adapt", "delta", "numPoints", "firstTime", "k", "baseMinusTMin", "decode", "input", "inputLength", "i", "n", "bias", "basic", "lastIndexOf", "j", "index", "oldi", "w", "codePoint", "t", "baseMinusT", "out", "splice", "fromCodePoint", "encode", "currentValue", "basicLength", "handledCPCount", "m", "handledCPCountPlusOne", "q", "qMinusT", "join", "e", "o", "e", "root", "ipv4Part", "ipv4Regexes", "fourOctet", "RegExp", "threeOctet", "twoOctet", "longValue", "octalRegex", "hexRegex", "zoneIndex", "ipv6Part", "ipv6Regexes", "native", "deprecatedTransitional", "transitional", "expandIPv6", "string", "parts", "indexOf", "lastIndexOf", "replacement", "replacementCount", "colonCount", "lastColon", "zoneId", "match", "substring", "replace", "substr", "slice", "length", "ref", "split", "results", "i", "push", "parseInt", "matchCIDR", "first", "second", "partSize", "cidrBits", "Error", "shift", "part", "parseIntAuto", "test", "isNaN", "padPart", "ipaddr", "IPv4", "octets", "octet", "this", "prototype", "SpecialRanges", "unspecified", "broadcast", "multicast", "linkLocal", "loopback", "carrierGradeNat", "private", "reserved", "as112", "amt", "kind", "other", "cidrRange", "prefixLengthFromSubnetMask", "cidr", "stop", "zerotable", "zeros", "range", "subnetMatch", "toByteArray", "toIPv4MappedAddress", "IPv6", "parse", "toString", "toNormalizedString", "join", "broadcastAddressFromCIDR", "parseCIDR", "ipInterfaceOctets", "subnetMaskOctets", "subnetMaskFromPrefixLength", "e", "isIPv4", "parser", "isValid", "isValidCIDR", "isValidFourPartDecimal", "networkAddressFromCIDR", "maskLength", "parsed", "Object", "defineProperty", "value", "reverse", "prefix", "j", "filledOctetCount", "Math", "floor", "pow", "uniqueLocal", "ipv4Mapped", "discard", "rfc6145", "rfc6052", "teredo", "benchmarking", "as112v6", "deprecated", "orchid2", "droneRemoteIdProtocolEntityTags", "isIPv4MappedAddress", "bytes", "toFixedLengthString", "addr", "call", "suffix", "toIPv4Address", "high", "low", "toRFC5952String", "regex", "bestMatchIndex", "bestMatchLength", "exec", "index", "isIPv6", "endsWith", "fromByteArray", "e2", "process", "address", "rangeList", "defaultName", "rangeName", "rangeSubnets", "subnet", "hasOwnProperty", "Array", "apply", "module", "exports", "serializeRecord", "str", "record", "RECORD_V1_SIZE", "get", "Record", "CNAME", "TXT", "encodePunycode", "Buffer", "from", "SOL", "UnsupportedRecordError", "ETH", "BSC", "check", "slice", "InvalidEvmAddressError", "Injective", "decoded", "bech32", "decodeToBytes", "prefix", "InvalidInjectiveAddressError", "bytes", "length", "A", "array", "parseIp", "parse", "toByteArray", "InvalidARecordError", "AAAA", "InvalidAAAARecordError", "Background", "PublicKey", "toBuffer", "InvalidRecordInputError", "createRecordInstruction", "async", "connection", "domain", "record", "data", "owner", "payer", "check", "Record", "SOL", "UnsupportedRecordError", "pubkey", "hashed", "parent", "getDomainKeySync", "RecordVersion", "V1", "space", "serializeRecord", "length", "lamports", "getMinimumBalanceForRentExemption", "NameRegistryState", "HEADER_LEN", "createInstruction", "NAME_PROGRAM_ID", "SystemProgram", "programId", "Numberu64", "Numberu32", "GUARDIANS", "Map", "Record", "Url", "PublicKey", "CNAME", "ETH_ROA_RECORDS", "Set", "ETH", "Injective", "BSC", "BASE", "EVM_RECORDS", "UTF8_ENCODED", "IPFS", "ARWV", "LTC", "DOGE", "Email", "Discord", "Github", "Reddit", "Twitter", "Telegram", "Pic", "SHDW", "POINT", "Backpack", "TXT", "BTC", "IPNS", "SELF_SIGNED", "SOL", "serializeRecordV2Content", "content", "record", "UTF8_ENCODED", "has", "Record", "CNAME", "TXT", "encodePunycode", "Buffer", "from", "SOL", "PublicKey", "toBuffer", "EVM_RECORDS", "check", "slice", "InvalidEvmAddressError", "Injective", "decoded", "bech32", "decodeToBytes", "prefix", "InvalidInjectiveAddressError", "bytes", "length", "A", "array", "parseIp", "parse", "toByteArray", "InvalidARecordError", "AAAA", "InvalidAAAARecordError", "InvalidRecordInputError", "createRecordV2Instruction", "domain", "record", "content", "owner", "payer", "pubkey", "parent", "isSub", "getDomainKeySync", "RecordVersion", "V2", "InvalidParrentError", "allocateAndPostRecord", "NAME_PROGRAM_ID", "concat", "serializeRecordV2Content", "SNS_RECORDS_ID", "createReverseInstruction", "obj", "this", "tag", "name", "serialize", "schema", "programId", "namingServiceProgram", "rootDomain", "reverseLookup", "systemProgram", "centralState", "feePayer", "rentSysvar", "parentName", "parentNameOwner", "data", "Buffer", "from", "keys", "push", "pubkey", "isSigner", "isWritable", "TransactionInstruction", "struct", "createReverseName", "async", "nameAccount", "name", "feePayer", "parentName", "parentNameOwner", "hashedReverseLookup", "getHashedNameSync", "toBase58", "reverseLookupAccount", "getNameAccountKeySync", "CENTRAL_STATE", "createReverseInstruction", "getInstruction", "REGISTER_PROGRAM_ID", "NAME_PROGRAM_ID", "ROOT_DOMAIN_ACCOUNT", "SystemProgram", "programId", "SYSVAR_RENT_PUBKEY", "U32_MASK64", "BigInt", "_32n", "fromBig", "n", "le", "h", "Number", "l", "split", "lst", "Ah", "Uint32Array", "length", "Al", "i", "toBig", "shrSH", "_l", "s", "shrSL", "rotrSH", "rotrSL", "rotrBH", "rotrBL", "rotr32H", "_h", "rotr32L", "rotlSH", "rotlSL", "rotlBH", "rotlBL", "add", "Bh", "Bl", "add3L", "Cl", "add3H", "low", "Ch", "add4L", "Dl", "add4H", "Dh", "add5L", "El", "add5H", "Eh", "u64$1", "SHA512_Kh", "SHA512_Kl", "u64", "split", "map", "n", "BigInt", "SHA512_W_H", "Uint32Array", "SHA512_W_L", "SHA512", "HashMD", "constructor", "super", "this", "Ah", "Al", "Bh", "Bl", "Ch", "Cl", "Dh", "Dl", "Eh", "El", "Fh", "Fl", "Gh", "Gl", "Hh", "Hl", "get", "set", "process", "view", "offset", "i", "getUint32", "W15h", "W15l", "s0h", "rotrSH", "shrSH", "s0l", "rotrSL", "shrSL", "W2h", "W2l", "s1h", "rotrBH", "s1l", "rotrBL", "SUMl", "add4L", "SUMh", "add4H", "sigma1h", "sigma1l", "CHIh", "CHIl", "T1ll", "add5L", "T1h", "add5H", "T1l", "sigma0h", "sigma0l", "MAJh", "MAJl", "h", "l", "add", "All", "add3L", "add3H", "roundClean", "fill", "destroy", "buffer", "sha512", "wrapConstructor", "BigInt", "_1n", "_2n", "isBytes", "a", "Uint8Array", "constructor", "name", "abytes", "item", "Error", "hexes", "Array", "from", "length", "_", "i", "toString", "padStart", "bytesToHex", "bytes", "hex", "hexToNumber", "asciis", "_0", "_9", "_A", "_F", "_a", "_f", "asciiToBase16", "char", "hexToBytes", "hl", "al", "array", "ai", "hi", "n1", "charCodeAt", "n2", "bytesToNumberBE", "bytesToNumberLE", "reverse", "numberToBytesBE", "n", "len", "numberToBytesLE", "ensureBytes", "title", "expectedLength", "res", "e", "concatBytes", "arrays", "sum", "pad", "set", "bitMask", "validatorFns", "bigint", "val", "function", "boolean", "string", "stringOrUint8Array", "isSafeInteger", "Number", "isArray", "field", "object", "Fp", "isValid", "hash", "outputLen", "_0n", "BigInt", "_1n", "_2n", "_3n", "_4n", "_5n", "_8n", "mod", "a", "b", "result", "pow", "num", "power", "modulo", "Error", "res", "pow2", "x", "invert", "number", "u", "r", "m", "tonelliShanks", "P", "legendreC", "Q", "S", "Z", "p1div4", "Fp", "n", "root", "eql", "sqr", "Q1div2", "neg", "ONE", "g", "mul", "ZERO", "t2", "ge", "FpSqrt", "c1", "n2", "v", "nv", "i", "sub", "isNegativeLE", "FIELD_FIELDS", "validateField", "field", "opts", "reduce", "map", "val", "ORDER", "MASK", "BYTES", "BITS", "validateObject", "FpPow", "f", "p", "d", "FpInvertBatch", "nums", "tmp", "Array", "length", "lastMultiplied", "acc", "is0", "inverted", "inv", "reduceRight", "nLength", "nBitLength", "_nBitLength", "toString", "nByteLength", "Math", "ceil", "Field", "bitLen", "isLE", "redef", "sqrtP", "Object", "freeze", "bitMask", "create", "isValid", "isOdd", "lhs", "rhs", "add", "div", "sqrN", "addN", "subN", "mulN", "sqrt", "invertBatch", "lst", "cmov", "c", "toBytes", "numberToBytesLE", "numberToBytesBE", "fromBytes", "bytes", "bytesToNumberLE", "bytesToNumberBE", "FpSqrtEven", "elm", "_0n", "BigInt", "_1n", "wNAF", "c", "bits", "constTimeNegate", "condition", "item", "neg", "negate", "opts", "W", "windows", "Math", "ceil", "windowSize", "unsafeLadder", "elm", "n", "p", "ZERO", "d", "add", "double", "precomputeWindow", "points", "base", "window", "push", "i", "precomputes", "f", "BASE", "mask", "maxNumber", "shiftBy", "offset", "wbits", "Number", "offset1", "offset2", "abs", "cond1", "cond2", "wNAFCached", "P", "precomputesMap", "transform", "_WINDOW_SIZE", "comp", "get", "this", "set", "validateBasic", "curve", "validateField", "Fp", "validateObject", "h", "Gx", "Gy", "nBitLength", "nByteLength", "Object", "freeze", "nLength", "ORDER", "_0n", "BigInt", "_1n", "_2n", "_8n", "VERIFY_DEFAULT", "zip215", "twistedEdwards", "curveDef", "CURVE", "curve", "opts", "validateBasic", "ut", "hash", "a", "d", "randomBytes", "adjustScalarBytes", "domain", "uvRatio", "mapToCurve", "Object", "freeze", "Fp", "n", "CURVE_ORDER", "prehash", "cHash", "nByteLength", "h", "cofactor", "MASK", "modP", "create", "u", "v", "isValid", "value", "sqrt", "inv", "e", "bytes", "data", "ctx", "phflag", "length", "Error", "inBig", "inRange", "max", "in0MaskRange", "assertInRange", "assertGE0", "pointPrecomputes", "Map", "isPoint", "other", "Point", "constructor", "ex", "ey", "ez", "et", "this", "x", "toAffine", "y", "p", "points", "toInv", "invertBatch", "map", "i", "fromAffine", "_setWindowSize", "windowSize", "_WINDOW_SIZE", "delete", "assertValidity", "is0", "X", "Y", "Z", "T", "X2", "Y2", "Z2", "Z4", "aX2", "equals", "X1", "Y1", "Z1", "X1Z2", "X2Z1", "Y1Z2", "Y2Z1", "ZERO", "negate", "double", "A", "B", "C", "D", "x1y1", "E", "G", "F", "H", "X3", "Y3", "T3", "Z3", "add", "T1", "T2", "subtract", "wNAF", "wnaf", "wNAFCached", "normalizeZ", "multiply", "scalar", "f", "multiplyUnsafe", "I", "unsafeLadder", "isSmallOrder", "isTorsionFree", "iz", "z", "ax", "ay", "zz", "clearCofactor", "hex", "len", "BYTES", "normed", "ensureBytes", "slice", "lastByte", "ORDER", "y2", "isXOdd", "isLastByteOdd", "privKey", "getExtendedPublicKey", "point", "toRawBytes", "toHex", "BASE", "Gx", "Gy", "modN", "mod", "modN_LE", "key", "hashed", "head", "prefix", "pointBytes", "hashDomainToScalar", "context", "Uint8Array", "msgs", "msg", "verifyOpts", "getPublicKey", "sign", "options", "r", "R", "s", "res", "verify", "sig", "publicKey", "SB", "fromHex", "error", "k", "ExtendedPoint", "utils", "randomPrivateKey", "precompute", "ED25519_P", "BigInt", "ED25519_SQRT_M1", "_1n", "_2n", "_5n", "_10n", "_20n", "_40n", "_80n", "Fp", "Field", "undefined", "ed25519", "twistedEdwards", "a", "d", "n", "h", "Gx", "Gy", "hash", "sha512", "randomBytes", "adjustScalarBytes", "bytes", "uvRatio", "u", "v", "P", "v3", "mod", "pow", "x", "b2", "b4", "pow2", "b5", "b10", "b20", "b40", "b80", "b160", "b240", "b250", "pow_p_5_8", "vx2", "root1", "root2", "useRoot1", "useRoot2", "noRoot", "isNegativeLE", "isValid", "value", "ELL2_C1", "ORDER", "sqrt", "neg", "ONE", "FpSqrtEven", "checkSolRecord", "record", "signedRecord", "pubkey", "ed25519", "verify", "toBytes", "serializeSolRecord", "content", "recordKey", "signer", "signature", "expected", "Buffer", "concat", "toBuffer", "encodedMessage", "TextEncoder", "encode", "toString", "valid", "checkSolRecord", "check", "InvalidSignatureError", "createSolRecordInstruction", "async", "connection", "domain", "content", "signer", "signature", "payer", "pubkey", "hashed", "parent", "getDomainKeySync", "Record", "SOL", "RecordVersion", "V1", "space", "serializeSolRecord", "length", "lamports", "getMinimumBalanceForRentExemption", "NameRegistryState", "HEADER_LEN", "createInstruction", "NAME_PROGRAM_ID", "SystemProgram", "programId", "Numberu64", "Numberu32", "createSubdomain", "async", "connection", "subdomain", "owner", "space", "feePayer", "ixs", "sub", "split", "InvalidDomainError", "parent", "pubkey", "getDomainKeySync", "lamports", "getMinimumBalanceForRentExemption", "NameRegistryState", "HEADER_LEN", "ix_create", "createNameRegistry", "concat", "push", "reverseKey", "getReverseKeySync", "info", "getAccountInfo", "data", "ix_reverse", "createReverseName", "deleteInstruction", "nameProgramId", "nameAccountKey", "refundTargetKey", "nameOwnerKey", "buffers", "Buffer", "from", "Int8Array", "data", "concat", "TransactionInstruction", "keys", "pubkey", "isSigner", "isWritable", "programId", "async", "deleteNameRegistry", "connection", "name", "refundTargetKey", "nameClass", "nameParent", "hashed_name", "getHashedNameSync", "nameAccountKey", "getNameAccountKeySync", "nameOwner", "NameRegistryState", "retrieve", "registry", "owner", "deleteInstruction", "NAME_PROGRAM_ID", "deleteRecordV2", "domain", "record", "owner", "payer", "pubkey", "parent", "isSub", "getDomainKeySync", "RecordVersion", "V2", "InvalidParrentError", "deleteRecord", "NAME_PROGRAM_ID", "SNS_RECORDS_ID", "ethValidateRecordV2Content", "domain", "record", "owner", "payer", "signature", "expectedPubkey", "pubkey", "parent", "isSub", "getDomainKeySync", "RecordVersion", "V2", "InvalidParrentError", "validateEthSignature", "NAME_PROGRAM_ID", "Validation", "Ethereum", "SNS_RECORDS_ID", "createInstructionV3", "obj", "this", "tag", "name", "space", "referrerIdxOpt", "serialize", "schema", "programId", "namingServiceProgram", "rootDomain", "reverseLookup", "systemProgram", "centralState", "buyer", "buyerTokenSource", "pythMappingAcc", "pythProductAcc", "pythPriceAcc", "vault", "splTokenProgram", "rentSysvar", "state", "referrerAccountOpt", "data", "Buffer", "from", "keys", "push", "pubkey", "isSigner", "isWritable", "TransactionInstruction", "struct", "option", "TOKEN_PROGRAM_ID", "PublicKey", "ASSOCIATED_TOKEN_PROGRAM_ID", "TokenError", "Error", "constructor", "message", "super", "TokenAccountNotFoundError", "this", "name", "TokenInvalidAccountOwnerError", "TokenInvalidAccountSizeError", "TokenInvalidMintError", "TokenOwnerOffCurveError", "AccountType", "ACCOUNT_TYPE_SIZE", "MultisigLayout", "struct", "u8", "bool", "publicKey", "MULTISIG_SIZE", "span", "MintLayout", "struct", "u32", "publicKey", "u64", "u8", "bool", "z", "j", "async", "getMint", "connection", "address", "commitment", "programId", "TOKEN_PROGRAM_ID", "unpackMint", "getAccountInfo", "info", "TokenAccountNotFoundError", "owner", "equals", "TokenInvalidAccountOwnerError", "data", "length", "MINT_SIZE", "TokenInvalidAccountSizeError", "rawMint", "decode", "slice", "tlvData", "Buffer", "alloc", "ACCOUNT_SIZE", "MULTISIG_SIZE", "AccountType", "Mint", "TokenInvalidMintError", "ACCOUNT_TYPE_SIZE", "mintAuthority", "mintAuthorityOption", "supply", "decimals", "isInitialized", "freezeAuthority", "freezeAuthorityOption", "createAssociatedTokenAccountIdempotentInstruction", "payer", "associatedToken", "owner", "mint", "programId", "TOKEN_PROGRAM_ID", "associatedTokenProgramId", "ASSOCIATED_TOKEN_PROGRAM_ID", "buildAssociatedTokenAccountInstruction", "instructionData", "keys", "pubkey", "isSigner", "isWritable", "o", "a", "p", "u", "m", "b", "Buffer", "from", "registerDomainName", "async", "connection", "name", "space", "buyer", "buyerTokenAccount", "mint", "USDC_MINT", "referrerKey", "includes", "trim", "toLowerCase", "InvalidDomainError", "hashed", "getHashedNameSync", "nameAccount", "getNameAccountKeySync", "ROOT_DOMAIN_ACCOUNT", "hashedReverseLookup", "toBase58", "reverseLookupAccount", "CENTRAL_STATE", "derived_state", "PublicKey", "findProgramAddressSync", "toBuffer", "REGISTER_PROGRAM_ID", "refIdx", "REFERRERS", "findIndex", "e", "equals", "refTokenAccount", "ixs", "getAssociatedTokenAddressSync", "acc", "getAccountInfo", "data", "ix", "createAssociatedTokenAccountIdempotentInstruction", "push", "vault", "VAULT_OWNER", "pythFeed", "PYTH_FEEDS", "get", "PythFeedNotFoundError", "createInstructionV3", "referrerIdxOpt", "getInstruction", "NAME_PROGRAM_ID", "SystemProgram", "programId", "PYTH_MAPPING_ACC", "product", "price", "TOKEN_PROGRAM_ID", "SYSVAR_RENT_PUBKEY", "createSplitV2Instruction", "obj", "this", "tag", "name", "space", "referrerIdxOpt", "serialize", "schema", "programId", "namingServiceProgram", "rootDomain", "reverseLookup", "systemProgram", "centralState", "buyer", "domainOwner", "feePayer", "buyerTokenSource", "pythFeedAccount", "vault", "splTokenProgram", "rentSysvar", "state", "referrerAccountOpt", "data", "Buffer", "from", "keys", "push", "pubkey", "isSigner", "isWritable", "TransactionInstruction", "struct", "option", "getPythFeedAccountKey", "shard", "priceFeed", "buffer", "Buffer", "alloc", "writeUint16LE", "PublicKey", "findProgramAddressSync", "from", "DEFAULT_PYTH_PUSH_PROGRAM", "registerDomainNameV2", "async", "connection", "name", "space", "buyer", "buyerTokenAccount", "mint", "USDC_MINT", "referrerKey", "includes", "trim", "toLowerCase", "InvalidDomainError", "hashed", "getHashedNameSync", "nameAccount", "getNameAccountKeySync", "ROOT_DOMAIN_ACCOUNT", "hashedReverseLookup", "toBase58", "reverseLookupAccount", "CENTRAL_STATE", "derived_state", "PublicKey", "findProgramAddressSync", "toBuffer", "REGISTER_PROGRAM_ID", "refIdx", "REFERRERS", "findIndex", "e", "equals", "refTokenAccount", "ixs", "getAssociatedTokenAddressSync", "acc", "getAccountInfo", "data", "ix", "createAssociatedTokenAccountIdempotentInstruction", "push", "vault", "VAULT_OWNER", "pythFeed", "PYTH_PULL_FEEDS", "get", "PythFeedNotFoundError", "pythFeedAccount", "getPythFeedAccountKey", "createSplitV2Instruction", "referrerIdxOpt", "getInstruction", "NAME_PROGRAM_ID", "SystemProgram", "programId", "TOKEN_PROGRAM_ID", "SYSVAR_RENT_PUBKEY", "registerFavoriteInstruction", "constructor", "this", "tag", "serialize", "schema", "programId", "nameAccount", "favouriteAccount", "owner", "systemProgram", "optParent", "data", "Buffer", "from", "keys", "push", "pubkey", "isSigner", "isWritable", "TransactionInstruction", "struct", "deserializeReverse", "data", "trimFirstNullByte", "nameLength", "slice", "readUInt32LE", "toString", "replace", "getReverseKeyFromDomainKey", "domainKey", "parent", "hashedReverseLookup", "getHashedNameSync", "toBase58", "getNameAccountKeySync", "REVERSE_LOOKUP_CLASS", "async", "reverseLookup", "connection", "nameAccount", "parent", "reverseKey", "getReverseKeyFromDomainKey", "registry", "NameRegistryState", "retrieve", "data", "NoAccountDataError", "deserializeReverse", "NAME_OFFERS_ID", "PublicKey", "FavouriteDomain", "obj", "this", "tag", "nameAccount", "data", "deserialize", "schema", "connection", "key", "accountInfo", "getAccountInfo", "FavouriteDomainNotFoundError", "programId", "owner", "findProgramAddress", "Buffer", "from", "toBuffer", "findProgramAddressSync", "struct", "array", "type", "len", "getFavoriteDomain", "async", "favKey", "getKeySync", "favorite", "retrieve", "registry", "nftOwner", "NameRegistryState", "domainOwner", "reverse", "reverseLookup", "parentName", "equals", "ROOT_DOMAIN_ACCOUNT", "domain", "stale", "getMultipleFavoriteDomains", "wallets", "result", "favKeys", "map", "e", "favDomains", "getMultipleAccountsInfo", "default", "domainInfos", "parentRevKeys", "revKeys", "idx", "parent", "_a", "slice", "alloc", "isSub", "NAME_PROGRAM_ID", "push", "getReverseKeyFromDomainKey", "undefined", "atas", "mint", "getDomainMint", "getAssociatedTokenAddressSync", "revs", "tokenAccs", "parentRevs", "Promise", "all", "i", "length", "parentRev", "domainInfo", "rev", "parentRevAccount", "tokenAcc", "deserializeReverse", "decoded", "AccountLayout", "decode", "Number", "amount", "registerFavorite", "async", "connection", "nameAccount", "owner", "parent", "registry", "NameRegistryState", "retrieve", "parentName", "equals", "ROOT_DOMAIN_ACCOUNT", "favKey", "FavouriteDomain", "getKey", "NAME_OFFERS_ID", "registerFavoriteInstruction", "getInstruction", "SystemProgram", "programId", "createWithNftInstruction", "obj", "this", "tag", "name", "space", "serialize", "schema", "programId", "namingServiceProgram", "rootDomain", "reverseLookup", "systemProgram", "centralState", "buyer", "nftSource", "nftMetadata", "nftMint", "masterEdition", "collection", "splTokenProgram", "rentSysvar", "state", "mplTokenMetadata", "data", "Buffer", "from", "keys", "push", "pubkey", "isSigner", "isWritable", "TransactionInstruction", "struct", "registerWithNft", "name", "space", "nameAccount", "reverseLookupAccount", "buyer", "nftSource", "nftMetadata", "nftMint", "masterEdition", "state", "PublicKey", "findProgramAddressSync", "toBuffer", "REGISTER_PROGRAM_ID", "createWithNftInstruction", "getInstruction", "NAME_PROGRAM_ID", "ROOT_DOMAIN_ACCOUNT", "SystemProgram", "programId", "REVERSE_LOOKUP_CLASS", "WOLVES_COLLECTION_METADATA", "TOKEN_PROGRAM_ID", "SYSVAR_RENT_PUBKEY", "METAPLEX_ID", "transferInstruction", "nameProgramId", "nameAccountKey", "newOwnerKey", "currentNameOwnerKey", "nameClassKey", "nameParent", "parentOwner", "buffers", "Buffer", "from", "Int8Array", "toBuffer", "data", "concat", "keys", "pubkey", "isSigner", "isWritable", "push", "PublicKey", "default", "TransactionInstruction", "programId", "async", "transferNameOwnership", "connection", "name", "newOwner", "nameClass", "nameParent", "parentOwner", "hashed_name", "getHashedNameSync", "nameAccountKey", "getNameAccountKeySync", "curentNameOwner", "NameRegistryState", "retrieve", "registry", "owner", "transferInstruction", "NAME_PROGRAM_ID", "transferSubdomain", "async", "connection", "subdomain", "newOwner", "isParentOwnerSigner", "owner", "pubkey", "isSub", "parent", "getDomainKeySync", "InvalidSubdomainError", "registry", "NameRegistryState", "retrieve", "nameParent", "nameParentOwner", "transferInstruction", "NAME_PROGRAM_ID", "updateInstruction", "nameProgramId", "nameAccountKey", "offset", "input_data", "nameUpdateSigner", "buffers", "Buffer", "from", "Int8Array", "toBuffer", "Numberu32", "length", "data", "concat", "TransactionInstruction", "keys", "pubkey", "isSigner", "isWritable", "programId", "async", "updateNameRegistryData", "connection", "name", "offset", "input_data", "nameClass", "nameParent", "hashed_name", "getHashedNameSync", "nameAccountKey", "getNameAccountKeySync", "signer", "NameRegistryState", "retrieve", "registry", "owner", "updateInstruction", "NAME_PROGRAM_ID", "Numberu32", "updateRecordInstruction", "async", "connection", "domain", "record", "data", "owner", "payer", "check", "Record", "SOL", "UnsupportedRecordError", "pubkey", "getDomainKeySync", "RecordVersion", "V1", "info", "getAccountInfo", "AccountDoesNotExistError", "serialized", "serializeRecord", "slice", "length", "deleteInstruction", "NAME_PROGRAM_ID", "createRecordInstruction", "updateInstruction", "Numberu32", "updateRecordV2Instruction", "domain", "record", "content", "owner", "payer", "pubkey", "parent", "isSub", "getDomainKeySync", "RecordVersion", "V2", "InvalidParrentError", "editRecord", "NAME_PROGRAM_ID", "concat", "serializeRecordV2Content", "SNS_RECORDS_ID", "updateSolRecordInstruction", "async", "connection", "domain", "content", "signer", "signature", "payer", "pubkey", "getDomainKeySync", "Record", "SOL", "RecordVersion", "V1", "info", "getAccountInfo", "check", "data", "AccountDoesNotExistError", "length", "deleteInstruction", "NAME_PROGRAM_ID", "createSolRecordInstruction", "serialized", "serializeSolRecord", "updateInstruction", "Numberu32", "validateRecordV2Content", "staleness", "domain", "record", "owner", "payer", "verifier", "pubkey", "parent", "isSub", "getDomainKeySync", "RecordVersion", "V2", "InvalidParrentError", "validateSolanaSignature", "NAME_PROGRAM_ID", "SNS_RECORDS_ID", "writRoaRecordV2", "domain", "record", "owner", "payer", "roaId", "pubkey", "parent", "isSub", "getDomainKeySync", "RecordVersion", "V2", "InvalidParrentError", "writeRoa", "NAME_PROGRAM_ID", "SNS_RECORDS_ID", "ReverseTwitterRegistryState", "obj", "this", "twitterRegistryKey", "twitterHandle", "connection", "reverseTwitterAccountKey", "reverseTwitterAccount", "getAccountInfo", "InvalidReverseTwitterError", "deserialize", "schema", "data", "slice", "NameRegistryState", "HEADER_LEN", "struct", "array", "type", "len", "async", "changeTwitterRegistryData", "twitterHandle", "verifiedPubkey", "offset", "input_data", "hashedTwitterHandle", "getHashedNameSync", "twitterHandleRegistryKey", "getNameAccountKeySync", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "updateInstruction", "NAME_PROGRAM_ID", "Numberu32", "async", "createReverseTwitterRegistry", "connection", "twitterHandle", "twitterRegistryKey", "verifiedPubkey", "payerKey", "hashedVerifiedPubkey", "getHashedNameSync", "toString", "reverseRegistryKey", "getNameAccountKeySync", "TWITTER_VERIFICATION_AUTHORITY", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "reverseTwitterRegistryStateBuff", "serialize", "ReverseTwitterRegistryState", "schema", "toBytes", "createInstruction", "NAME_PROGRAM_ID", "SystemProgram", "programId", "Numberu64", "getMinimumBalanceForRentExemption", "length", "NameRegistryState", "HEADER_LEN", "Numberu32", "updateInstruction", "Buffer", "from", "async", "changeVerifiedPubkey", "connection", "twitterHandle", "currentVerifiedPubkey", "newVerifiedPubkey", "payerKey", "hashedTwitterHandle", "getHashedNameSync", "twitterHandleRegistryKey", "getNameAccountKeySync", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "instructions", "transferInstruction", "NAME_PROGRAM_ID", "undefined", "push", "deleteNameRegistry", "toString", "TWITTER_VERIFICATION_AUTHORITY", "concat", "createReverseTwitterRegistry", "async", "createVerifiedTwitterRegistry", "connection", "twitterHandle", "verifiedPubkey", "space", "payerKey", "hashedTwitterHandle", "getHashedNameSync", "twitterHandleRegistryKey", "getNameAccountKeySync", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "lamports", "getMinimumBalanceForRentExemption", "NameRegistryState", "HEADER_LEN", "instructions", "createInstruction", "NAME_PROGRAM_ID", "SystemProgram", "programId", "Numberu64", "Numberu32", "TWITTER_VERIFICATION_AUTHORITY", "concat", "createReverseTwitterRegistry", "async", "deleteTwitterRegistry", "twitterHandle", "verifiedPubkey", "hashedTwitterHandle", "getHashedNameSync", "twitterHandleRegistryKey", "getNameAccountKeySync", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "hashedVerifiedPubkey", "toString", "reverseRegistryKey", "TWITTER_VERIFICATION_AUTHORITY", "deleteInstruction", "NAME_PROGRAM_ID", "async", "getHandleAndRegistryKey", "connection", "verifiedPubkey", "hashedVerifiedPubkey", "getHashedNameSync", "toString", "reverseRegistryKey", "getNameAccountKeySync", "TWITTER_VERIFICATION_AUTHORITY", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "reverseRegistryState", "ReverseTwitterRegistryState", "retrieve", "twitterHandle", "PublicKey", "twitterRegistryKey", "async", "getTwitterHandleandRegistryKeyViaFilters", "connection", "verifiedPubkey", "filters", "memcmp", "offset", "bytes", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "toBase58", "TWITTER_VERIFICATION_AUTHORITY", "filteredAccounts", "getProgramAccounts", "NAME_PROGRAM_ID", "f", "account", "data", "length", "NameRegistryState", "HEADER_LEN", "slice", "state", "ReverseTwitterRegistryState", "deserialize", "schema", "twitterHandle", "PublicKey", "twitterRegistryKey", "AccountDoesNotExistError", "async", "getTwitterRegistry", "connection", "twitter_handle", "hashedTwitterHandle", "getHashedNameSync", "twitterHandleRegistryKey", "getNameAccountKeySync", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "registry", "NameRegistryState", "retrieve", "async", "getTwitterRegistryData", "connection", "verifiedPubkey", "filters", "memcmp", "offset", "bytes", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "toBase58", "PublicKey", "Buffer", "alloc", "filteredAccounts", "getProgramAccounts", "NAME_PROGRAM_ID", "length", "MultipleRegistriesError", "account", "data", "slice", "NameRegistryState", "HEADER_LEN", "async", "getTwitterRegistryKey", "twitter_handle", "hashedTwitterHandle", "getHashedNameSync", "getNameAccountKeySync", "TWITTER_ROOT_PARENT_REGISTRY_KEY", "findSubdomains", "async", "connection", "parentKey", "filtersRevs", "memcmp", "offset", "bytes", "toBase58", "REVERSE_LOOKUP_CLASS", "reverses", "getProgramAccounts", "NAME_PROGRAM_ID", "filters", "filtersSubs", "subs", "dataSlice", "length", "map", "Map", "e", "pubkey", "deserializeReverse", "account", "data", "slice", "result", "forEach", "revKey", "getReverseKeyFromDomainKey", "rev", "get", "push", "async", "getAllDomains", "connection", "wallet", "filters", "memcmp", "offset", "bytes", "toBase58", "ROOT_DOMAIN_ACCOUNT", "getProgramAccounts", "NAME_PROGRAM_ID", "dataSlice", "length", "map", "a", "pubkey", "getAllRegisteredDomains", "async", "connection", "filters", "memcmp", "offset", "bytes", "ROOT_DOMAIN_ACCOUNT", "toBase58", "getProgramAccounts", "NAME_PROGRAM_ID", "dataSlice", "length", "async", "reverseLookupBatch", "connection", "nameAccounts", "reverseLookupAccounts", "nameAccount", "hashedReverseLookup", "getHashedNameSync", "toBase58", "reverseLookupAccount", "getNameAccountKeySync", "REVERSE_LOOKUP_CLASS", "push", "NameRegistryState", "retrieveBatch", "map", "name", "data", "deserializeReverse", "async", "getDomainKeysWithReverses", "connection", "wallet", "encodedNameArr", "getAllDomains", "names", "reverseLookupBatch", "map", "pubKey", "index", "domain", "v", "f", "d", "A", "TINF_OK", "TINF_DATA_ERROR", "Tree", "this", "table", "Uint16Array", "trans", "Data", "source", "dest", "sourceIndex", "tag", "bitcount", "destLen", "ltree", "dtree", "sltree", "sdtree", "length_bits", "Uint8Array", "length_base", "dist_bits", "dist_base", "clcidx", "code_tree", "lengths", "tinf_build_bits_base", "bits", "base", "delta", "first", "i", "sum", "offs", "tinf_build_tree", "t", "off", "num", "tinf_getbit", "d", "bit", "tinf_read_bits", "val", "tinf_decode_symbol", "cur", "len", "tinf_decode_trees", "lt", "dt", "hlit", "hdist", "hclen", "length", "clen", "sym", "prev", "tinf_inflate_block_data", "dist", "tinf_inflate_uncompressed_block", "tinyInflate", "bfinal", "res", "Error", "slice", "subarray", "isBigEndian", "Uint8Array", "Uint32Array", "buffer", "swap", "b", "n", "m", "i", "swap_1", "swap32LE", "array", "len", "length", "inflate", "require$$0", "swap32LE", "require$$1", "unicodeTrie", "constructor", "data", "isBuffer", "readUInt32BE", "slice", "Uint8Array", "uncompressedLength", "this", "highStart", "readUInt32LE", "errorValue", "view", "DataView", "buffer", "getUint32", "subarray", "Uint32Array", "get", "codePoint", "index", "DATA_BLOCK_LENGTH", "INDEX_1_OFFSET", "INDEX_2_BLOCK_LENGTH", "length", "e", "version", "VERSION", "_hasatob", "_hasbtoa", "_hasBuffer", "_TD", "_TE", "b64ch", "b64chs", "b64tab", "b64re", "_fromCC", "_U8Afrom", "_mkUriSafe", "_tidyB64", "btoaPolyfill", "_btoa", "_fromUint8Array", "fromUint8Array", "cb_utob", "re_utob", "utob", "_encode", "encode", "encodeURI", "re_btou", "cb_btou", "btou", "atobPolyfill", "_atob", "_toUint8Array", "toUint8Array", "_decode", "_unURI", "decode", "_noEnum", "extendString", "extendUint8Array", "extendBuiltins", "gBase64", "tab", "self", "window", "exports", "atob", "btoa", "Buffer", "TextDecoder", "TextEncoder", "Array", "prototype", "slice", "call", "forEach", "c", "i", "String", "fromCharCode", "bind", "Uint8Array", "from", "it", "src", "replace", "m0", "s", "bin", "u32", "c0", "c1", "c2", "asc", "pad", "length", "charCodeAt", "TypeError", "substring", "u8a", "toString", "maxargs", "strs", "l", "push", "apply", "subarray", "join", "cc", "cccc", "offset", "test", "u24", "r1", "r2", "charAt", "a", "split", "map", "v", "value", "enumerable", "writable", "configurable", "_add", "name", "body", "Object", "defineProperty", "this", "urlsafe", "fromBase64", "toBase64", "encodeURL", "u", "b", "isValid", "keys", "k", "Base64", "types", "Other", "CR", "LF", "Control", "Extend", "ZWJ", "Regional_Indicator", "Prepend", "SpacingMark", "L", "V", "T", "LV", "LVT", "Extended_Pictographic", "types", "require$$0", "typeTrieData", "require$$1", "data", "extPictData", "require$$2", "UnicodeTrie", "require$$3", "Base64", "require$$4", "typeTrie", "toUint8Array", "extPict", "is", "type", "bit", "GB11State", "nextGraphemeClusterSize", "ts", "start", "L", "length", "ri", "gb11State", "i", "curr", "next", "Regional_Indicator", "Extended_Pictographic", "Extend", "ZWJ", "CR", "LF", "Control", "V", "LV", "LVT", "T", "SpacingMark", "Prepend", "o", "str", "graphemeClusters", "map", "code", "codePointAt", "push", "get", "offset", "size", "end", "slice", "getDomainPriceFromName", "name", "splitGraphemes", "length", "Tag", "NftRecord", "obj", "this", "tag", "nonce", "nameAccount", "PublicKey", "owner", "nftMint", "data", "deserialize", "schema", "connection", "key", "accountInfo", "getAccountInfo", "NftRecordNotFoundError", "toBase58", "programId", "findProgramAddress", "Buffer", "from", "toBuffer", "findProgramAddressSync", "LEN", "struct", "array", "type", "len", "getRecordFromMint", "async", "connection", "mint", "filters", "dataSize", "NftRecord", "LEN", "memcmp", "offset", "bytes", "toBase58", "getProgramAccounts", "NAME_TOKENIZER_ID", "getFilter", "owner", "memcmp", "offset", "bytes", "retrieveRecords", "async", "connection", "filters", "toBase58", "dataSize", "promises", "getProgramAccounts", "TOKEN_PROGRAM_ID", "map", "e", "AccountLayout", "decode", "account", "data", "acc", "record", "getRecordFromMint", "mint", "length", "NftRecord", "deserialize", "Promise", "all", "filter", "getTokenizedDomains", "async", "connection", "owner", "nftRecords", "retrieveRecords", "reverseLookupBatch", "map", "e", "nameAccount", "idx", "key", "mint", "nftMint", "reverse", "filter", "createV2Instruction", "obj", "this", "tag", "name", "space", "serialize", "schema", "programId", "rentSysvarAccount", "nameProgramId", "rootDomain", "nameAccount", "reverseLookupAccount", "centralState", "buyer", "buyerTokenAccount", "usdcVault", "state", "data", "Buffer", "from", "keys", "pubkey", "isSigner", "isWritable", "SystemProgram", "TOKEN_PROGRAM_ID", "TransactionInstruction", "struct", "reallocInstruction", "nameProgramId", "systemProgramId", "payerKey", "nameAccountKey", "nameOwnerKey", "space", "buffers", "Buffer", "from", "Int8Array", "toBuffer", "data", "concat", "TransactionInstruction", "keys", "pubkey", "isSigner", "isWritable", "programId", "retrieveNftOwner", "async", "connection", "nameAccount", "mint", "getDomainMint", "getMint", "supply", "toString", "filters", "memcmp", "offset", "bytes", "toBase58", "dataSize", "result", "getProgramAccounts", "TOKEN_PROGRAM_ID", "length", "PublicKey", "account", "data", "slice", "retrieveNfts", "async", "connection", "filters", "dataSize", "NftRecord", "LEN", "memcmp", "offset", "bytes", "result", "getProgramAccounts", "NAME_TOKENIZER_ID", "map", "e", "PublicKey", "account", "data", "slice", "src", "ALPHABET", "length", "TypeError", "BASE_MAP", "Uint8Array", "j", "i", "x", "charAt", "xc", "charCodeAt", "BASE", "LEADER", "FACTOR", "Math", "log", "iFACTOR", "decodeUnsafe", "source", "psz", "zeroes", "size", "b256", "carry", "it3", "Error", "it4", "vch", "encode", "ArrayBuffer", "isView", "buffer", "byteOffset", "byteLength", "Array", "isArray", "from", "pbegin", "pend", "b58", "it1", "it2", "str", "repeat", "decode", "string", "bs58", "require$$0", "deserializeRecord", "registry", "record", "recordKey", "buffer", "data", "compare", "Buffer", "alloc", "length", "size", "RECORD_V1_SIZE", "get", "idx", "arr", "Array", "from", "reverse", "findIndex", "byte", "str", "slice", "toString", "Record", "CNAME", "TXT", "decodePunnyCode", "SOL", "encoder", "TextEncoder", "expectedBuffer", "concat", "toBuffer", "expected", "encode", "checkSolRecord", "owner", "bs58Encode", "address", "Injective", "decoded", "bech32", "decodeToBytes", "prefix", "bytes", "BSC", "ETH", "hex", "A", "AAAA", "isValidIp", "InvalidRecordDataError", "toWords", "ipFromByteArray", "fromByteArray", "Background", "PublicKey", "getRecordKeySync", "domain", "record", "pubkey", "getDomainKeySync", "RecordVersion", "V1", "async", "getRecord", "connection", "domain", "record", "deserialize", "pubkey", "getRecordKeySync", "registry", "NameRegistryState", "retrieve", "data", "NoRecordDataError", "deserializeRecord", "recordSize", "RECORD_V1_SIZE", "get", "slice", "async", "getRecords", "connection", "domain", "records", "deserialize", "pubkeys", "map", "record", "getRecordKeySync", "registries", "NameRegistryState", "retrieveBatch", "e", "idx", "deserializeRecord", "getArweaveRecord", "connection", "domain", "getRecord", "Record", "ARWV", "getBackgroundRecord", "connection", "domain", "getRecord", "Record", "Background", "getBackpackRecord", "connection", "domain", "getRecord", "Record", "Backpack", "getBtcRecord", "connection", "domain", "getRecord", "Record", "BTC", "getBscRecord", "connection", "domain", "getRecord", "Record", "BSC", "getDiscordRecord", "connection", "domain", "getRecord", "Record", "Discord", "getDogeRecord", "connection", "domain", "getRecord", "Record", "DOGE", "getEmailRecord", "connection", "domain", "getRecord", "Record", "Email", "getEthRecord", "connection", "domain", "getRecord", "Record", "ETH", "getGithubRecord", "connection", "domain", "getRecord", "Record", "Github", "getInjectiveRecord", "connection", "domain", "getRecord", "Record", "Injective", "getIpfsRecord", "connection", "domain", "getRecord", "Record", "IPFS", "getLtcRecord", "connection", "domain", "getRecord", "Record", "LTC", "getPicRecord", "connection", "domain", "getRecord", "Record", "Pic", "getPointRecord", "connection", "domain", "getRecord", "Record", "POINT", "getRedditRecord", "connection", "domain", "getRecord", "Record", "Reddit", "getShdwRecord", "connection", "domain", "getRecord", "Record", "SHDW", "getSolRecord", "connection", "domain", "getRecord", "Record", "SOL", "getTelegramRecord", "connection", "domain", "getRecord", "Record", "Telegram", "getTwitterRecord", "connection", "domain", "getRecord", "Record", "Twitter", "getUrlRecord", "connection", "domain", "getRecord", "Record", "Url", "CustomBg", "getRecordV2Key", "domain", "record", "pubkey", "getDomainKeySync", "hashed", "getHashedNameSync", "concat", "getNameAccountKeySync", "CENTRAL_STATE_SNS_RECORDS", "resolve", "async", "connection", "domain", "config", "allowPda", "y", "pubkey", "getDomainKeySync", "nftRecordKey", "NftRecord", "findKeySync", "NAME_TOKENIZER_ID", "solRecordV1Key", "getRecordKeySync", "Record", "SOL", "solRecordV2Key", "getRecordV2Key", "nftRecordInfo", "solRecordV1Info", "solRecordV2Info", "registryInfo", "getMultipleAccountsInfo", "data", "DomainDoesNotExist", "registry", "NameRegistryState", "deserialize", "tag", "Tag", "ActiveRecord", "nftOwner", "retrieveNftOwnerV2", "CouldNotFindNftOwner", "recordV2", "RecordV2", "stalenessId", "getStalenessId", "roaId", "getRoAId", "content", "getContent", "length", "RecordMalformed", "header", "rightOfAssociationValidation", "Validation", "Solana", "stalenessValidation", "WrongValidation", "equals", "owner", "toBuffer", "PublicKey", "InvalidRoAError", "toBase58", "encoder", "TextEncoder", "expectedBuffer", "Buffer", "concat", "slice", "HEADER_LEN", "expected", "encode", "toString", "checkSolRecord", "SIGNATURE_LENGTH_IN_BYTES", "isOnCurve", "ownerInfo", "getAccountInfo", "_a", "programIds", "some", "e", "PdaOwnerNotAllowed", "resolveSolRecordV1", "async", "connection", "owner", "domain", "recordKey", "getRecordKeySync", "Record", "SOL", "solRecord", "getSolRecord", "data", "NoRecordDataError", "encoder", "TextEncoder", "expectedBuffer", "Buffer", "concat", "slice", "toBuffer", "expected", "encode", "toString", "checkSolRecord", "InvalidSignatureError", "PublicKey", "resolveSolRecordV2", "async", "connection", "owner", "domain", "recordV2Key", "getRecordV2Key", "Record", "SOL", "solV2Record", "SnsRecord", "retrieve", "stalenessId", "getStalenessId", "roaId", "getRoAId", "content", "getContent", "compare", "toBuffer", "header", "stalenessValidation", "Validation", "Solana", "rightOfAssociationValidation", "PublicKey", "err", "Error", "name", "DEGEN_POET_KEY", "PublicKey", "RBG_0x00_KEY", "RETARDIO_KEY", "NUMBER_ART_KEY", "getCustomBgKeys", "domain", "customBg", "hashedBg", "getHashedNameSync", "hashedDomain", "domainKey", "getNameAccountKeySync", "CUSTOM_BG_TLD", "bgKey", "getArtistPubkey", "bg", "CustomBg", "DegenPoet1", "Rgb0x001", "Retardio1", "Retardio2", "Retardio3", "NumberArt0", "NumberArt1", "NumberArt2", "NumberArt3", "NumberArt4", "NumberArt5", "NumberArt6", "NumberArt7", "NumberArt8", "NumberArt9", "InvalidCustomBgError", "deserializeRecordV2Content", "content", "record", "UTF8_ENCODED", "has", "decoded", "toString", "Record", "CNAME", "TXT", "decodePunnycode", "SOL", "PublicKey", "toBase58", "EVM_RECORDS", "Injective", "bech32", "encode", "toWords", "A", "AAAA", "ipFromByteArray", "fromByteArray", "InvalidRecordDataError", "async", "getRecordV2", "connection", "domain", "record", "options", "pubkey", "getRecordV2Key", "retrievedRecord", "SnsRecord", "retrieve", "deserialize", "deserializedContent", "deserializeRecordV2Content", "getContent", "async", "getMultipleRecordsV2", "connection", "domain", "records", "options", "pubkeys", "map", "record", "getRecordV2Key", "retrievedRecords", "SnsRecord", "retrieveBatch", "deserialize", "e", "idx", "retrievedRecord", "deserializedContent", "deserializeRecordV2Content", "getContent", "verifyRightOfAssociation", "async", "connection", "record", "domain", "verifier", "recordKey", "getRecordV2Key", "recordObj", "SnsRecord", "retrieve", "roaId", "getRoAId", "validation", "ETH_ROA_RECORDS", "has", "Validation", "Ethereum", "Solana", "_a", "GUARDIANS", "get", "toBuffer", "MissingVerifierError", "compare", "header", "rightOfAssociationValidation", "verifyStaleness", "async", "connection", "record", "domain", "recordKey", "getRecordV2Key", "registry", "nftOwner", "NameRegistryState", "retrieve", "getDomainKeySync", "pubkey", "owner", "recordObj", "SnsRecord", "stalenessId", "getStalenessId", "equals", "PublicKey", "header", "stalenessValidation", "Validation", "Solana", "constants", "NAME_PROGRAM_ID", "PublicKey", "HASH_PREFIX", "ROOT_DOMAIN_ACCOUNT", "REGISTER_PROGRAM_ID", "REVERSE_LOOKUP_CLASS", "USDC_MINT", "REFERRERS", "TOKENS_SYM_MINT", "Map", "PYTH_FEEDS", "price", "product", "PYTH_MAPPING_ACC", "VAULT_OWNER", "getNameAccountKeySync", "hashed_name", "nameClass", "nameParent", "seeds", "push", "toBuffer", "Buffer", "alloc", "nameAccountKey", "findProgramAddressSync", "_deriveSync", "name", "parent", "classKey", "hashed", "getHashedNameSync", "pubkey", "getDomainKeySync", "domain", "endsWith", "slice", "splitted", "split", "length", "sub", "concat", "parentKey", "isSub", "InvalidInputError", "undefined", "getReverseKeySync", "hashedReverseLookup", "toBase58", "async", "createNameRegistry", "connection", "space", "payerKey", "nameOwner", "lamports", "parentName", "getHashedName", "balance", "getMinimumBalanceForRentExemption", "nameParentOwner", "registry", "parentAccount", "getNameOwner", "owner", "createInstruction", "SystemProgram", "programId", "Numberu64", "Numberu32", "createReverseName", "nameAccount", "feePayer", "parentNameOwner", "centralState", "findProgramAddress", "reverseLookupAccount", "createReverseInstruction", "getInstruction", "SYSVAR_RENT_PUBKEY", "devnet", "utils", "reverseLookup", "NameRegistryState", "retrieve", "data", "NoAccountDataError", "deserializeReverse", "bindings", "updateNameRegistryData", "offset", "input_data", "signer", "updateInstruction", "transferNameOwnership", "newOwner", "parentOwner", "curentNameOwner", "transferInstruction", "deleteNameRegistry", "refundTargetKey", "deleteInstruction", "registerDomainName", "buyer", "buyerTokenAccount", "mint", "referrerKey", "includes", "trim", "toLowerCase", "InvalidDomainError", "cs", "derived_state", "refIdx", "findIndex", "e", "equals", "refTokenAccount", "ixs", "getAssociatedTokenAddressSync", "acc", "getAccountInfo", "ix", "createAssociatedTokenAccountIdempotentInstruction", "vault", "pythFeed", "get", "PythFeedNotFoundError", "createInstructionV3", "referrerIdxOpt", "TOKEN_PROGRAM_ID", "createSubdomain", "subdomain", "InvalidSubdomainError", "HEADER_LEN", "ix_create", "reverseKey", "info", "ix_reverse", "burnDomain", "target", "state", "resellingState", "Uint8Array", "from", "burnInstruction", "transferSubdomain", "isParentOwnerSigner", "registerDomainNameV2", "PYTH_PULL_FEEDS", "pythFeedAccount", "getPythFeedAccountKey", "createSplitV2Instruction"]
}
