/**
 * üìÇ walletStateService.js - Maneja estado y conexi√≥n de wallets
 */

import { connectWallet, disconnectWallet, isConnected } from './walletService';

// Estado centralizado de la wallet
let walletState = {
  pubkey: null,
  balance: null,
};

/**
 * üîç Obtiene el estado actual de la wallet
 * @returns {{pubkey: string|null, balance: number|null}}
 */
export const getWalletState = () => walletState;

/**
 * üîπ Actualiza el estado de la wallet
 * @param {string|null} pubkey - Clave p√∫blica de la wallet
 * @param {number|null} balance - Balance de la wallet
 */
const updateWalletState = (pubkey, balance) => {
  walletState = { pubkey, balance };
};

/**
 * üîç Detecta autom√°ticamente si hay una wallet conectada (intenta conexi√≥n autom√°tica primero y popup si necesario)
 * @returns {Promise<{pubkey: string|null, balance: number|null, status: string}>}
 */
export const detectWallet = async () => {
  console.log('[WalletStateService] üîç Intentando detectar wallet autom√°ticamente...');

  const walletTypes = ['phantom', 'backpack', 'magiceden'];

  for (const walletType of walletTypes) {
    const { pubkey } = await handleWalletSelected(walletType);

    if (pubkey) {
      console.log('[WalletStateService] ‚úÖ Wallet detectada autom√°ticamente:', { pubkey });
      return { pubkey, balance: null, status: 'connected' };
    }
  }

  console.warn('[WalletStateService] ‚ùå No se pudo detectar autom√°ticamente ninguna wallet.');
  updateWalletState(null, null);
  return { pubkey: null, balance: null, status: 'not_connected' };
};

/**
 * üîå Conectar manualmente a una wallet espec√≠fica
 * @param {string} walletType - Tipo de wallet ("phantom", "backpack", "magiceden")
 * @returns {Promise<{pubkey: string|null, balance: number|null, status: string}>}
 */
export const handleWalletSelected = async (walletType) => {
  if (!walletType) {
    console.error('[WalletStateService] ‚ùå Tipo de wallet no definido.');
    return { pubkey: null, balance: null, status: 'invalid_wallet_type' };
  }

  console.log(`[WalletStateService] üîç Intentando conectar con wallet: ${walletType}`);

  try {
    if (isConnected()) {
      console.log('[WalletStateService] üîç Wallet previa detectada, desconectando primero...');
      await disconnectWallet();
    }

    const { pubkey } = await connectWallet({ walletType, onlyIfTrusted: true });

    if (!pubkey) {
      console.warn('[WalletStateService] ‚ö†Ô∏è Conexi√≥n autom√°tica fallida, abriendo popup manualmente...');
      const manualConnection = await connectWallet({ walletType });
      
      if (!manualConnection.pubkey) {
        console.error('[WalletStateService] ‚ùå No se pudo conectar manualmente.');
        updateWalletState(null, null);
        return { pubkey: null, balance: null, status: 'connection_failed' };
      }

      updateWalletState(manualConnection.pubkey, null);
      console.log('[WalletStateService] ‚úÖ Wallet conectada manualmente exitosamente:', { pubkey: manualConnection.pubkey });
      return { pubkey: manualConnection.pubkey, balance: null, status: 'connected' };
    }

    updateWalletState(pubkey, null);
    console.log('[WalletStateService] ‚úÖ Wallet conectada autom√°ticamente exitosamente:', { pubkey });
    return { pubkey, balance: null, status: 'connected' };

  } catch (error) {
    console.error('[WalletStateService] ‚ùå Error en conexi√≥n manual:', error.message);
    updateWalletState(null, null);
    return { pubkey: null, balance: null, status: 'error' };
  }
};

/**
 * ‚ùå Cierre de sesi√≥n completo
 * @returns {Promise<void>}
 */
export const handleLogoutClick = async () => {
  console.log('[WalletStateService] üîç Intentando cerrar sesi√≥n...');

  try {
    await disconnectWallet();
    updateWalletState(null, null);
    console.log('[WalletStateService] üîí Sesi√≥n cerrada correctamente');
  } catch (error) {
    console.error('[WalletStateService] ‚ùå Error en logout:', error.message);
  }
};
