/**
 * üìÇ walletStateService.js - Maneja estado y conexi√≥n de wallets
 */

import { connectWallet, disconnectWallet, isConnected, getPublicKey } from './walletService';

// Estado centralizado de la wallet
let walletState = {
  pubkey: null,
  balance: null,
};

/**
 * üîç Obtiene el estado actual de la wallet
 * @returns {{pubkey: string|null, balance: number|null}}
 */
export const getWalletState = () => walletState;

/**
 * üîπ Actualiza el estado de la wallet
 * @param {string|null} pubkey - Clave p√∫blica de la wallet
 * @param {number|null} balance - Balance de la wallet
 */
const updateWalletState = (pubkey, balance) => {
  walletState = { pubkey, balance };
};

/**
 * üîç Detecta autom√°ticamente si hay una wallet conectada (conexi√≥n autom√°tica real)
 * @returns {Promise<{pubkey: string|null, balance: number|null, status: string}>}
 */
export const detectWallet = async () => {
  console.log('[WalletStateService] üîç Intentando detectar wallet autom√°ticamente...');

  try {
    const { pubkey } = await connectWallet({ onlyIfTrusted: true });

    if (!pubkey) {
      console.warn('[WalletStateService] ‚ùå No se detect√≥ ninguna wallet autom√°ticamente.');
      updateWalletState(null, null);
      return { pubkey: null, balance: null, status: 'not_connected' };
    }

    console.log('[WalletStateService] ‚úÖ Wallet detectada autom√°ticamente:', { pubkey });
    updateWalletState(pubkey, null);
    return { pubkey, balance: null, status: 'connected' };
  } catch (error) {
    console.error('[WalletStateService] ‚ùå Error detectando wallet autom√°ticamente:', error.message);
    updateWalletState(null, null);
    return { pubkey: null, balance: null, status: 'error' };
  }
};

/**
 * üîå Conectar manualmente a una wallet espec√≠fica
 * @param {string} walletType - Tipo de wallet ("phantom", "backpack", "magiceden")
 * @returns {Promise<{pubkey: string|null, balance: number|null, status: string}>}
 */
export const handleWalletSelected = async (walletType) => {
  if (!walletType) {
    console.error('[WalletStateService] ‚ùå Tipo de wallet no definido.');
    return { pubkey: null, balance: null, status: 'invalid_wallet_type' };
  }

  console.log(`[WalletStateService] üîç Intentando conectar con wallet: ${walletType}`);

  try {
    if (isConnected()) {
      console.log('[WalletStateService] üîç Wallet previa detectada, desconectando primero...');
      await disconnectWallet();
    }

    const { pubkey } = await connectWallet({ walletType });

    if (!pubkey) {
      console.error('[WalletStateService] ‚ùå No se pudo conectar a la wallet.');
      updateWalletState(null, null);
      return { pubkey: null, balance: null, status: 'connection_failed' };
    }

    console.log('[WalletStateService] ‚úÖ Wallet conectada exitosamente:', { pubkey });
    updateWalletState(pubkey, null);
    return { pubkey, balance: null, status: 'connected' };
  } catch (error) {
    console.error('[WalletStateService] ‚ùå Error en conexi√≥n manual:', error.message);
    updateWalletState(null, null);
    return { pubkey: null, balance: null, status: 'error' };
  }
};

/**
 * ‚ùå Cierre de sesi√≥n completo
 * @returns {Promise<void>}
 */
export const handleLogoutClick = async () => {
  console.log('[WalletStateService] üîç Intentando cerrar sesi√≥n...');

  try {
    await disconnectWallet();
    updateWalletState(null, null);
    console.log('[WalletStateService] üîí Sesi√≥n cerrada correctamente');
  } catch (error) {
    console.error('[WalletStateService] ‚ùå Error en logout:', error.message);
  }
};
