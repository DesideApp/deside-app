import { getToken, setToken, removeToken, refreshToken, isTokenExpired } from "./tokenService.js";
import API_BASE_URL from "../config/apiConfig.js";

// üîê **Realiza solicitudes autenticadas al backend**
export async function fetchWithAuth(url, options = {}) {
    try {
        let token = getToken();

        // Si el token est√° expirado o no existe, intentamos renovarlo
        if (!token || isTokenExpired()) {
            console.warn("üîÑ Token inv√°lido o expirado. Intentando renovaci√≥n...");
            try {
                token = await refreshToken();
            } catch (error) {
                console.error("‚ùå No se pudo renovar el token. Cerrando sesi√≥n.");
                logout();
                throw new Error("Token inv√°lido. Por favor, vuelve a autenticarte.");
            }
        }

        options.headers = {
            ...options.headers,
            Authorization: `Bearer ${token}`,
        };

        const response = await fetch(url, options);

        // Si el token sigue siendo inv√°lido, forzamos logout
        if (response.status === 403) {
            console.warn("‚ö†Ô∏è Token inv√°lido, cerrando sesi√≥n.");
            logout();
            throw new Error("Token inv√°lido. Por favor, vuelve a autenticarte.");
        }

        return response;
    } catch (error) {
        console.error("‚ùå Error en `fetchWithAuth()`:", error.message || error);
        throw error;
    }
}

// üîµ **Autenticar con el servidor y obtener JWT**
export async function authenticateWithServer(pubkey, signature, message) {
    try {
        console.log("üîµ Enviando autenticaci√≥n con:", { pubkey, signature, message });

        const response = await fetch(`${API_BASE_URL}/api/auth/token`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ pubkey, signature, message }),
        });

        if (!response.ok) throw new Error("‚ùå Fallo en autenticaci√≥n");

        const { token, refreshToken } = await response.json();
        setToken(token, refreshToken);

        console.log("‚úÖ Autenticaci√≥n exitosa. Token almacenado.");
        return token;
    } catch (error) {
        console.error("‚ùå Error en `authenticateWithServer()`:", error.message || error);
        throw error;
    }
}

// üîÑ **Registrar wallet en el backend si no est√° registrada**
export async function registerWallet(pubkey) {
    try {
        console.log(`üîµ Verificando si la wallet ${pubkey} ya est√° registrada...`);

        const checkResponse = await fetch(`${API_BASE_URL}/api/auth/check-wallet`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ pubkey }),
        });

        const { exists } = await checkResponse.json();
        if (exists) {
            console.log(`‚úÖ La wallet ${pubkey} ya est√° registrada.`);
            return;
        }

        console.log(`üîµ Registrando wallet ${pubkey} en el backend...`);
        const response = await fetch(`${API_BASE_URL}/api/auth/register-wallet`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ pubkey }),
        });

        if (!response.ok) throw new Error("‚ùå Error registrando wallet.");
        console.log(`‚úÖ Wallet ${pubkey} registrada correctamente.`);
    } catch (error) {
        console.error("‚ùå Error en `registerWallet()`:", error.message || error);
        throw error;
    }
}

// üîê **Cerrar sesi√≥n de manera segura**
export function logout(redirect = true) {
    console.info("üîµ Cerrando sesi√≥n y eliminando credenciales.");
    removeToken();
    localStorage.removeItem("walletAddress");
    localStorage.removeItem("walletType");
    window.dispatchEvent(new Event("walletDisconnected"));

    // üîÑ Opcionalmente redirigir a la pantalla de login
    if (redirect) {
        window.location.href = "/login";
    }
}
